{"version":3,"file":"RouterLink.js","sourceRoot":"","sources":["../../src/components/RouterLink.tsx"],"names":[],"mappings":";AAAA,mBAAmB;AACnB,OAAO,EAAE,IAAI,EAAE,MAAM,iBAAiB,CAAC;AACvC,OAAO,EAAE,OAAO,EAAE,MAAM,kBAAkB,CAAC;AAE3C,OAAO,EAGL,UAAU,GAGX,MAAM,OAAO,CAAC;AACf,OAAO,EAAE,mBAAmB,EAAE,MAAM,8BAA8B,CAAC;AA+BnE,MAAM,kBAAkB,GAAG,+BAA+B,CAAC;AAE3D,MAAM,SAAS,GACb,OAAO,MAAM,KAAK,WAAW;IAC7B,OAAO,MAAM,CAAC,QAAQ,KAAK,WAAW;IACtC,OAAO,MAAM,CAAC,QAAQ,CAAC,aAAa,KAAK,WAAW,CAAC;AAEvD,MAAM,CAAC,MAAM,UAAU,GAAG,UAAU,CAClC,UACE,EACE,EAAE,EACF,QAAQ,EACR,OAAO,EACP,MAAM,EACN,cAAc,EACd,OAAO,EACP,GAAG,IAAI,EACS,EAClB,GAAG;IAEH,2CAA2C;IAC3C,IAAI,YAAY,CAAC;IACjB,IAAI,UAAU,GAAG,KAAK,CAAC;IAEvB,IAAI,OAAO,EAAE,KAAK,QAAQ,IAAI,kBAAkB,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;QACzD,mDAAmD;QACnD,YAAY,GAAG,EAAE,CAAC;QAElB,8CAA8C;QAC9C,IAAI,SAAS,EAAE;YACb,MAAM,UAAU,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YACjD,MAAM,SAAS,GAAG,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC;gBACnC,CAAC,CAAC,IAAI,GAAG,CAAC,UAAU,CAAC,QAAQ,GAAG,EAAE,CAAC;gBACnC,CAAC,CAAC,IAAI,GAAG,CAAC,EAAE,CAAC,CAAC;YAChB,MAAM,IAAI,GAAG,SAAS,CAAC,QAAQ,CAAC;YAEhC,IAAI,SAAS,CAAC,MAAM,KAAK,UAAU,CAAC,MAAM,EAAE;gBAC1C,mEAAmE;gBACnE,EAAE,GAAG,IAAI,GAAG,SAAS,CAAC,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC;aAC/C;iBAAM;gBACL,UAAU,GAAG,IAAI,CAAC;aACnB;SACF;KACF;IAED,MAAM,IAAI,GAAG,OAAO,CAAC,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC;IAEvC,MAAM,eAAe,GAAG,mBAAmB,CAAC,EAAE,EAAE;QAC9C,OAAO;QACP,MAAM;QACN,QAAQ;KACT,CAAC,CAAC;IAEH,SAAS,WAAW,CAClB,KAAqD;QAErD,IAAI,OAAO;YAAE,OAAO,CAAC,KAAK,CAAC,CAAC;QAC5B,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE;YAC3B,eAAe,CAAC,KAAK,CAAC,CAAC;SACxB;IACH,CAAC;IAED,OAAO,CACL,KAAC,IAAI,OACC,IAAI,EACR,IAAI,EAAE,YAAY,IAAI,IAAI,EAC1B,OAAO,EAAE,UAAU,IAAI,cAAc,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,WAAW,EAC7D,GAAG,EAAE,GAAG,EACR,MAAM,EAAE,MAAM,GACR,CACT,CAAC;AACJ,CAAC,CACF,CAAC","sourcesContent":["// @ts-expect-error\nimport { Link } from '@vkontakte/vkui';\nimport { useHref } from '../hooks/useHref';\nimport { RelativeRoutingType, To } from '@remix-run/router';\nimport {\n  AnchorHTMLAttributes,\n  CSSProperties,\n  forwardRef,\n  ReactNode,\n  MouseEvent as ReactMouseEvent,\n} from 'react';\nimport { useLinkClickHandler } from '../hooks/useLinkClickHandler';\n\nexport interface LinkProps\n  extends Omit<AnchorHTMLAttributes<HTMLAnchorElement>, 'href'> {\n  reloadDocument?: boolean;\n  replace?: boolean;\n  relative?: RelativeRoutingType;\n  to: To;\n}\n\nexport interface RouterLinkProps\n  extends Omit<LinkProps, 'className' | 'style' | 'children'> {\n  children?:\n  | ReactNode\n  | ((props: { isActive: boolean; isPending: boolean }) => ReactNode);\n  caseSensitive?: boolean;\n  className?:\n  | string\n  | ((props: {\n    isActive: boolean;\n    isPending: boolean;\n  }) => string | undefined);\n  end?: boolean;\n  style?:\n  | CSSProperties\n  | ((props: {\n    isActive: boolean;\n    isPending: boolean;\n  }) => CSSProperties | undefined);\n}\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst isBrowser =\n  typeof window !== 'undefined' &&\n  typeof window.document !== 'undefined' &&\n  typeof window.document.createElement !== 'undefined';\n\nexport const RouterLink = forwardRef<HTMLAnchorElement, RouterLinkProps>(\n  function(\n    {\n      to,\n      relative,\n      replace,\n      target,\n      reloadDocument,\n      onClick,\n      ...rest\n    }: RouterLinkProps,\n    ref,\n  ) {\n    // Rendered into <a href> for absolute URLs\n    let absoluteHref;\n    let isExternal = false;\n\n    if (typeof to === 'string' && ABSOLUTE_URL_REGEX.test(to)) {\n      // Render the absolute href server- and client-side\n      absoluteHref = to;\n\n      // Only check for external origins client-side\n      if (isBrowser) {\n        const currentUrl = new URL(window.location.href);\n        const targetUrl = to.startsWith('//')\n          ? new URL(currentUrl.protocol + to)\n          : new URL(to);\n        const path = targetUrl.pathname;\n\n        if (targetUrl.origin === currentUrl.origin) {\n          // Strip the protocol/origin/basename for same-origin absolute URLs\n          to = path + targetUrl.search + targetUrl.hash;\n        } else {\n          isExternal = true;\n        }\n      }\n    }\n    \n    const href = useHref(to, { relative });\n\n    const internalOnClick = useLinkClickHandler(to, {\n      replace,\n      target,\n      relative,\n    });\n\n    function handleClick(\n      event: ReactMouseEvent<HTMLAnchorElement, MouseEvent>\n    ) {\n      if (onClick) onClick(event);\n      if (!event.defaultPrevented) {\n        internalOnClick(event);\n      }\n    }\n\n    return (\n      <Link\n        {...rest}\n        href={absoluteHref || href}\n        onClick={isExternal || reloadDocument ? onClick : handleClick}\n        ref={ref}\n        target={target}\n      ></Link>\n    );\n  }\n);\n"]}