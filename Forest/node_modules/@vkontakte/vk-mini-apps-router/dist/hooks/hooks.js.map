{"version":3,"file":"hooks.js","sourceRoot":"","sources":["../../src/hooks/hooks.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,YAAY,EAAE,aAAa,EAAE,MAAM,aAAa,CAAC;AACzE,OAAO,EAAoB,gBAAgB,IAAI,SAAS,EAAE,MAAM,mBAAmB,CAAC;AAEpF,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAG5D,MAAM,UAAU,iBAAiB;IAC/B,MAAM,CAAC,aAAa,CAAC,GAAG,mBAAmB,CAAC,aAAa,CAAC,CAAC;IAC3D,SAAS,CAAC,aAAa,EAAE,yGAAyG,CAAC,CAAC;IACpI,OAAO,aAAa,CAAC,cAAc,CAAC;AACtC,CAAC;AASD,MAAM,UAAU,SAAS,CAA4B,EAAU;IAC7D,MAAM,CAAC,YAAY,EAAE,gBAAgB,CAAC,GAAG,mBAAmB,CAAC,YAAY,CAAC,CAAC;IAC3E,SAAS,CAAC,YAAY,EAAE,qGAAqG,CAAC,CAAC;IAC/H,MAAM,KAAK,GAAG,EAAE;WACX,gBAAgB;WACf,MAAM,CAAC,IAAI,CAAC,EAAE,CAAgC,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,YAAY,CAAC,KAAK,EAAE,KAAuB,CAAA,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC;WAC5H,MAAM,CAAC,IAAI,CAAC,EAAE,CAAgC,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,gBAAgB,CAAC,KAAK,EAAE,KAAuB,CAAA,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC;QACpI,CAAC,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC;IAChD,OAAO,KAAK,EAAE,MAAM,CAAC;AACvB,CAAC;AAED,MAAM,UAAU,WAAW;IACzB,MAAM,CAAC,YAAY,CAAC,GAAG,mBAAmB,CAAC,YAAY,CAAC,CAAC;IACzD,SAAS,CAAC,YAAY,EAAE,uGAAuG,CAAC,CAAC;IACjI,OAAO,YAAY,CAAC,KAAK,CAAC,QAAQ,CAAC;AACrC,CAAC;AAED,MAAM,UAAU,SAAS;IACvB,MAAM,CAAC,aAAa,CAAC,GAAG,mBAAmB,CAAC,aAAa,CAAC,CAAC;IAC3D,OAAO,aAAa,CAAC,MAAM,CAAC;AAC9B,CAAC","sourcesContent":["import { PopoutContext, RouteContext, RouterContext } from '../contexts';\nimport { Location, Params, UNSAFE_invariant as invariant } from '@remix-run/router';\nimport { RouteNavigator } from '../services/RouteNavigator.type';\nimport { useThrottledContext } from './useThrottledContext';\nimport { ModalWithRoot } from '../type';\n\nexport function useRouteNavigator(): RouteNavigator {\n  const [routerContext] = useThrottledContext(RouterContext);\n  invariant(routerContext, 'You can not use useNavigator hook outside of RouterContext. Make sure calling it inside RouterProvider.');\n  return routerContext.routeNavigator;\n}\n\ntype RequireOnlyOne<T, Keys extends keyof T = keyof T> =\n  Pick<T, Exclude<keyof T, Keys>>\n  & { [K in Keys]-?: Required<Pick<T, K>> & Partial<Record<Exclude<Keys, K>, undefined>> }[Keys];\n\ntype AnimatedParts = Pick<ModalWithRoot, 'tab' | 'panel' | 'modal'>;\ntype NavId = RequireOnlyOne<AnimatedParts>;\n\nexport function useParams<T extends string = string>(id?: NavId): Params<T> | undefined {\n  const [routeContext, prevRouteContext] = useThrottledContext(RouteContext);\n  invariant(routeContext, 'You can not use useParams hook outside of RouteContext. Make sure calling it inside RouterProvider.');\n  const match = id\n    && prevRouteContext\n    && (Object.keys(id) as unknown as (keyof NavId)[]).every((key) => (routeContext.match?.route as ModalWithRoot)[key] !== id[key])\n    && (Object.keys(id) as unknown as (keyof NavId)[]).every((key) => (prevRouteContext.match?.route as ModalWithRoot)[key] === id[key])\n    ? prevRouteContext.match : routeContext.match;\n  return match?.params;\n}\n\nexport function useLocation(): Location {\n  const [routeContext] = useThrottledContext(RouteContext);\n  invariant(routeContext, 'You can not use useLocation hook outside of RouteContext. Make sure calling it inside RouterProvider.');\n  return routeContext.state.location;\n}\n\nexport function usePopout(): JSX.Element | null {\n  const [popoutContext] = useThrottledContext(PopoutContext);\n  return popoutContext.popout;\n}\n"]}