{"ast":null,"code":"import { createPath } from '@remix-run/router';\nimport { useCallback } from 'react';\nimport { useLocation, useRouteNavigator } from './hooks';\nimport { useResolvedPath } from './useResolvedPath';\n\nfunction isModifiedEvent(event) {\n  return Boolean(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport function shouldProcessLinkClick(event, target) {\n  return event.button === 0 && ( // Ignore everything but left clicks\n  !target || target === '_self') && // Let browser handle \"target=_blank\" etc.\n  !isModifiedEvent(event) // Ignore clicks with modifier keys\n  ;\n}\nexport function useLinkClickHandler(to) {\n  let {\n    target,\n    replace: replaceProp,\n    preventScrollReset,\n    relative\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const navigator = useRouteNavigator();\n  const location = useLocation();\n  const path = useResolvedPath(to, {\n    relative\n  });\n  return useCallback(event => {\n    if (shouldProcessLinkClick(event, target)) {\n      event.preventDefault(); // If the URL hasn't changed, a regular <a> will do a replace instead of\n      // a push, so do the same here unless the replace prop is explicitly set\n\n      const toPath = createPath(path);\n      const replace = replaceProp !== undefined ? replaceProp : createPath(location) === toPath;\n\n      if (replace) {\n        navigator.replace(toPath);\n      } else {\n        navigator.push(toPath);\n      }\n    }\n  }, [location, navigator, path, replaceProp, target, to, preventScrollReset, relative]);\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAT,QAAoD,mBAApD;AACA,SAAmEC,WAAnE,QAAsF,OAAtF;AACA,SAASC,WAAT,EAAsBC,iBAAtB,QAA+C,SAA/C;AACA,SAASC,eAAT,QAAgC,mBAAhC;;AAOA,SAASC,eAAT,CAAyBC,KAAzB,EAAiD;EAC/C,OAAOC,OAAO,CAACD,KAAK,CAACE,OAAN,IAAiBF,KAAK,CAACG,MAAvB,IAAiCH,KAAK,CAACI,OAAvC,IAAkDJ,KAAK,CAACK,QAAzD,CAAd;AACD;;AAED,OAAM,SAAUC,sBAAV,CACJN,KADI,EAEJO,MAFI,EAEW;EAEf,OACEP,KAAK,CAACQ,MAAN,KAAiB,CAAjB,MAAsB;EACrB,CAACD,MAAD,IAAWA,MAAM,KAAK,OADvB,KACmC;EACnC,CAACR,eAAe,CAACC,KAAD,CAHlB,CAG0B;EAH1B;AAKD;AAED,OAAM,SAAUS,mBAAV,CACJC,EADI,EAYE;EAAA,IAVN;IACEH,MADF;IAEEI,OAAO,EAAEC,WAFX;IAGEC,kBAHF;IAIEC;EAJF,CAUM,uEAAF,EAAE;EAEN,MAAMC,SAAS,GAAGlB,iBAAiB,EAAnC;EACA,MAAMmB,QAAQ,GAAGpB,WAAW,EAA5B;EACA,MAAMqB,IAAI,GAAGnB,eAAe,CAACY,EAAD,EAAK;IAAEI;EAAF,CAAL,CAA5B;EAEA,OAAOnB,WAAW,CACfK,KAAD,IAA0C;IACxC,IAAIM,sBAAsB,CAACN,KAAD,EAAQO,MAAR,CAA1B,EAA2C;MACzCP,KAAK,CAACkB,cAAN,GADyC,CAGzC;MACA;;MACA,MAAMC,MAAM,GAAGzB,UAAU,CAACuB,IAAD,CAAzB;MACA,MAAMN,OAAO,GACXC,WAAW,KAAKQ,SAAhB,GACIR,WADJ,GAEIlB,UAAU,CAACsB,QAAD,CAAV,KAAyBG,MAH/B;;MAKA,IAAIR,OAAJ,EAAa;QACXI,SAAS,CAACJ,OAAV,CAAkBQ,MAAlB;MACD,CAFD,MAEO;QACLJ,SAAS,CAACM,IAAV,CAAeF,MAAf;MACD;IACF;EACF,CAnBe,EAoBhB,CACEH,QADF,EAEED,SAFF,EAGEE,IAHF,EAIEL,WAJF,EAKEL,MALF,EAMEG,EANF,EAOEG,kBAPF,EAQEC,QARF,CApBgB,CAAlB;AA+BD","names":["createPath","useCallback","useLocation","useRouteNavigator","useResolvedPath","isModifiedEvent","event","Boolean","metaKey","altKey","ctrlKey","shiftKey","shouldProcessLinkClick","target","button","useLinkClickHandler","to","replace","replaceProp","preventScrollReset","relative","navigator","location","path","preventDefault","toPath","undefined","push"],"sources":["C:\\Users\\nasti\\Desktop\\VK\\ForestEm\\Forest\\node_modules\\@vkontakte\\vk-mini-apps-router\\src\\hooks\\useLinkClickHandler.ts"],"sourcesContent":["import { createPath, RelativeRoutingType, To } from '@remix-run/router';\nimport { HTMLAttributeAnchorTarget, MouseEvent as ReactMouseEvent, useCallback } from 'react';\nimport { useLocation, useRouteNavigator } from './hooks';\nimport { useResolvedPath } from './useResolvedPath';\n\ntype LimitedMouseEvent = Pick<\nMouseEvent,\n'button' | 'metaKey' | 'altKey' | 'ctrlKey' | 'shiftKey'\n>;\n\nfunction isModifiedEvent(event: LimitedMouseEvent): boolean {\n  return Boolean(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport function shouldProcessLinkClick(\n  event: LimitedMouseEvent,\n  target?: string\n): boolean {\n  return (\n    event.button === 0 && // Ignore everything but left clicks\n    (!target || target === '_self') && // Let browser handle \"target=_blank\" etc.\n    !isModifiedEvent(event) // Ignore clicks with modifier keys\n  );\n}\n\nexport function useLinkClickHandler<E extends Element = HTMLAnchorElement>(\n  to: To,\n  {\n    target,\n    replace: replaceProp,\n    preventScrollReset,\n    relative,\n  }: {\n    target?: HTMLAttributeAnchorTarget;\n    replace?: boolean;\n    preventScrollReset?: boolean;\n    relative?: RelativeRoutingType;\n  } = {}\n): (event: ReactMouseEvent<E, MouseEvent>) => void {\n  const navigator = useRouteNavigator();\n  const location = useLocation();\n  const path = useResolvedPath(to, { relative });\n\n  return useCallback(\n    (event: ReactMouseEvent<E, MouseEvent>) => {\n      if (shouldProcessLinkClick(event, target)) {\n        event.preventDefault();\n\n        // If the URL hasn't changed, a regular <a> will do a replace instead of\n        // a push, so do the same here unless the replace prop is explicitly set\n        const toPath = createPath(path);\n        const replace =\n          replaceProp !== undefined\n            ? replaceProp\n            : createPath(location) === toPath;\n\n        if (replace) {\n          navigator.replace(toPath);\n        } else {\n          navigator.push(toPath);\n        }\n      }\n    },\n    [\n      location,\n      navigator,\n      path,\n      replaceProp,\n      target,\n      to,\n      preventScrollReset,\n      relative,\n    ]\n  );\n}\n"]},"metadata":{},"sourceType":"module"}