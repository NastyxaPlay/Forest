{"ast":null,"code":"import { uniqueKey } from './common';\nexport class ViewConfig {\n  constructor(id, panels) {\n    this.id = id;\n    this.panels = panels;\n    panels.forEach(panel => {\n      // @ts-expect-error\n      this[uniqueKey(this, panel.id)] = panel;\n    });\n  }\n\n  get children() {\n    return this.panels;\n  }\n\n  getRoutes() {\n    return this.panels.map(panel => panel.getRoutes()).flat().map(panelRoute => ({ ...panelRoute,\n      view: this.id\n    }));\n  }\n\n}\nexport function createView(id, panels) {\n  return new ViewConfig(id, panels);\n}","map":{"version":3,"mappings":"AACA,SAAyDA,SAAzD,QAA0E,UAA1E;AASA,OAAM,MAAOC,UAAP,CAAiB;EACrBC,YAAmBC,EAAnB,EAAkCC,MAAlC,EAAoD;IAAjC;IAAe;IAChCA,MAAM,CAACC,OAAP,CAAgBC,KAAD,IAAU;MACvB;MACA,KAAKN,SAAS,CAAC,IAAD,EAAOM,KAAK,CAACH,EAAb,CAAd,IAAkCG,KAAlC;IACD,CAHD;EAID;;EAEW,IAARC,QAAQ;IACV,OAAO,KAAKH,MAAZ;EACD;;EAEDI,SAAS;IACP,OAAO,KAAKJ,MAAL,CACJK,GADI,CACCH,KAAD,IAAWA,KAAK,CAACE,SAAN,EADX,EAEJE,IAFI,GAGJD,GAHI,CAGCE,UAAD,KAAiB,EAAE,GAAGA,UAAL;MAAiBC,IAAI,EAAE,KAAKT;IAA5B,CAAjB,CAHA,CAAP;EAID;;AAjBoB;AA+EvB,OAAM,SAAUU,UAAV,CAAuCV,EAAvC,EAA8CC,MAA9C,EAAgE;EACpE,OAAO,IAAIH,UAAJ,CAAkBE,EAAlB,EAAsBC,MAAtB,CAAP;AACD","names":["uniqueKey","ViewConfig","constructor","id","panels","forEach","panel","children","getRoutes","map","flat","panelRoute","view","createView"],"sources":["C:\\Users\\nasti\\Desktop\\VK\\ForestEm\\Forest\\node_modules\\@vkontakte\\vk-mini-apps-router\\src\\page-types\\ViewConfig.ts"],"sourcesContent":["import { AnyPanel } from './PanelPage';\nimport { AddChild, HasChildren, HasId, RepresentsRoutes, uniqueKey } from './common';\nimport { CommonRouteObject } from '../type';\n\ninterface ViewRoutePartial extends CommonRouteObject {\n  view: string;\n  panel: string;\n  modal?: string;\n}\n\nexport class ViewConfig<T extends string> implements HasId<T>, HasChildren<AnyPanel>, RepresentsRoutes<ViewRoutePartial> {\n  constructor(public id: T, private panels: AnyPanel[]) {\n    panels.forEach((panel) => {\n      // @ts-expect-error\n      this[uniqueKey(this, panel.id)] = panel;\n    });\n  }\n\n  get children(): AnyPanel[] {\n    return this.panels;\n  }\n\n  getRoutes(): ViewRoutePartial[] {\n    return this.panels\n      .map((panel) => panel.getRoutes())\n      .flat()\n      .map((panelRoute) => ({ ...panelRoute, view: this.id }));\n  }\n}\n\nexport function createView<\n  T extends string, A extends AnyPanel, B extends AnyPanel, C extends AnyPanel, D extends AnyPanel,\n  E extends AnyPanel, F extends AnyPanel, G extends AnyPanel, H extends AnyPanel, I extends AnyPanel,\n  J extends AnyPanel, K extends AnyPanel, L extends AnyPanel, M extends AnyPanel,\n>(id: T, panels: [A, B, C, D, E, F, G, H, I, J, K, L, M]): AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<\nAddChild<AddChild<AddChild<AddChild<AddChild<ViewConfig<T>, A>, B>, C>, D>, E>, F>, G>, H>, I>, J>, K>, L>, M>;\nexport function createView<\n  T extends string, A extends AnyPanel, B extends AnyPanel, C extends AnyPanel, D extends AnyPanel,\n  E extends AnyPanel, F extends AnyPanel, G extends AnyPanel, H extends AnyPanel, I extends AnyPanel,\n  J extends AnyPanel, K extends AnyPanel, L extends AnyPanel,\n>(id: T, panels: [A, B, C, D, E, F, G, H, I, J, K, L]): AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<\nAddChild<AddChild<AddChild<AddChild<ViewConfig<T>, A>, B>, C>, D>, E>, F>, G>, H>, I>, J>, K>, L>;\nexport function createView<\n  T extends string, A extends AnyPanel, B extends AnyPanel, C extends AnyPanel, D extends AnyPanel,\n  E extends AnyPanel, F extends AnyPanel, G extends AnyPanel, H extends AnyPanel, I extends AnyPanel,\n  J extends AnyPanel, K extends AnyPanel,\n>(id: T, panels: [A, B, C, D, E, F, G, H, I, J, K]): AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<\nAddChild<AddChild<AddChild<ViewConfig<T>, A>, B>, C>, D>, E>, F>, G>, H>, I>, J>, K>;\nexport function createView<\n  T extends string, A extends AnyPanel, B extends AnyPanel, C extends AnyPanel, D extends AnyPanel,\n  E extends AnyPanel, F extends AnyPanel, G extends AnyPanel, H extends AnyPanel, I extends AnyPanel,\n  J extends AnyPanel,\n>(id: T, panels: [A, B, C, D, E, F, G, H, I, J]): AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<\nAddChild<AddChild<ViewConfig<T>, A>, B>, C>, D>, E>, F>, G>, H>, I>, J>;\nexport function createView<\n  T extends string, A extends AnyPanel, B extends AnyPanel, C extends AnyPanel, D extends AnyPanel,\n  E extends AnyPanel, F extends AnyPanel, G extends AnyPanel, H extends AnyPanel, I extends AnyPanel,\n>(id: T, panels: [A, B, C, D, E, F, G, H, I]): AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<\nAddChild<ViewConfig<T>, A>, B>, C>, D>, E>, F>, G>, H>, I>;\nexport function createView<\n  T extends string, A extends AnyPanel, B extends AnyPanel, C extends AnyPanel, D extends AnyPanel,\n  E extends AnyPanel, F extends AnyPanel, G extends AnyPanel, H extends AnyPanel,\n>(id: T, panels: [A, B, C, D, E, F, G, H]): AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<\nAddChild<ViewConfig<T>, A>, B>, C>, D>, E>, F>, G>, H>;\nexport function createView<\n  T extends string, A extends AnyPanel, B extends AnyPanel, C extends AnyPanel, D extends AnyPanel,\n  E extends AnyPanel, F extends AnyPanel, G extends AnyPanel,\n>(id: T, panels: [A, B, C, D, E, F, G]): AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<\nAddChild<ViewConfig<T>, A>, B>, C>, D>, E>, F>, G>;\nexport function createView<\n  T extends string, A extends AnyPanel, B extends AnyPanel, C extends AnyPanel, D extends AnyPanel,\n  E extends AnyPanel, F extends AnyPanel,\n>(id: T, panels: [A, B, C, D, E, F]): AddChild<AddChild<AddChild<AddChild<AddChild<\nAddChild<ViewConfig<T>, A>, B>, C>, D>, E>, F>;\nexport function createView<\n  T extends string, A extends AnyPanel, B extends AnyPanel, C extends AnyPanel, D extends AnyPanel,\n  E extends AnyPanel,\n>(id: T, panels: [A, B, C, D, E]): AddChild<AddChild<AddChild<AddChild<AddChild<ViewConfig<T>, A>, B>, C>, D>, E>;\nexport function createView<\n  T extends string, A extends AnyPanel, B extends AnyPanel, C extends AnyPanel, D extends AnyPanel,\n>(id: T, panels: [A, B, C, D]): AddChild<AddChild<AddChild<AddChild<ViewConfig<T>, A>, B>, C>, D>;\nexport function createView<\n  T extends string, A extends AnyPanel, B extends AnyPanel, C extends AnyPanel,\n>(id: T, panels: [A, B, C]): AddChild<AddChild<AddChild<ViewConfig<T>, A>, B>, C>;\nexport function createView<\n  T extends string, A extends AnyPanel, B extends AnyPanel,\n>(id: T, panels: [A, B]): AddChild<AddChild<ViewConfig<T>, A>, B>;\nexport function createView<T extends string, A extends AnyPanel>(id: T, panels: [A]): AddChild<ViewConfig<T>, A>;\nexport function createView<T extends string>(id: T, panels: AnyPanel[]): ViewConfig<T>;\nexport function createView<T extends string>(id: T, panels: AnyPanel[]): ViewConfig<T> {\n  return new ViewConfig<T>(id, panels);\n}\n"]},"metadata":{},"sourceType":"module"}