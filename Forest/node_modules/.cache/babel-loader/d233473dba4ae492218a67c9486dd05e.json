{"ast":null,"code":"import { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport { ThrottledContext } from '../contexts'; // eslint-disable-next-line @typescript-eslint/no-empty-function\n\nconst EMPTY_FUNCTION = () => {};\n\nexport function useThrottledContext(context) {\n  const {\n    enabled,\n    interval,\n    firstActionDelay\n  } = useContext(ThrottledContext);\n  const prevValue = useRef(null);\n  const value = useContext(context);\n  const updated = useRef(0);\n  const updateTimer = useRef(0);\n  const updateCallback = useRef(null);\n  const [throttledValue, setThrottledValue] = useState(value);\n\n  if (!enabled) {\n    const returnPrev = prevValue.current;\n    prevValue.current = value;\n    return [value, returnPrev, EMPTY_FUNCTION];\n  }\n\n  useEffect(() => {\n    const timeDiff = Date.now() - updated.current;\n    const throttleDelay = interval - timeDiff;\n    const initialDelay = throttleDelay <= 0 ? firstActionDelay : 0;\n    const delay = Math.max(initialDelay, throttleDelay);\n\n    if (delay <= 0) {\n      updated.current = Date.now();\n      setThrottledValue(value);\n    } else {\n      clearTimeout(updateTimer.current);\n\n      updateCallback.current = () => {\n        updateCallback.current = null;\n        updated.current = Date.now();\n        setThrottledValue(value);\n      };\n\n      updateTimer.current = setTimeout(updateCallback.current, delay);\n    }\n\n    return () => clearTimeout(updateTimer.current);\n  }, [value]);\n  const onTransitionEnd = useCallback(() => {\n    updated.current = 0;\n\n    if (updateCallback.current) {\n      clearTimeout(updateTimer.current);\n      updateTimer.current = setTimeout(updateCallback.current, 1);\n    }\n\n    return () => clearTimeout(updateTimer.current);\n  }, []);\n  const returnPrev = prevValue.current;\n  prevValue.current = throttledValue;\n  return [throttledValue, returnPrev, onTransitionEnd];\n}","map":{"version":3,"mappings":"AAAA,SAAkBA,WAAlB,EAA+BC,UAA/B,EAA2CC,SAA3C,EAAsDC,MAAtD,EAA8DC,QAA9D,QAA8E,OAA9E;AACA,SAASC,gBAAT,QAAiC,aAAjC,C,CAGA;;AACA,MAAMC,cAAc,GAAG,MAAK,CAAG,CAA/B;;AAEA,OAAM,SAAUC,mBAAV,CAAiCC,OAAjC,EAAoD;EACxD,MAAM;IAAEC,OAAF;IAAWC,QAAX;IAAqBC;EAArB,IAA0CV,UAAU,CAACI,gBAAD,CAA1D;EACA,MAAMO,SAAS,GAAGT,MAAM,CAAW,IAAX,CAAxB;EACA,MAAMU,KAAK,GAAGZ,UAAU,CAACO,OAAD,CAAxB;EACA,MAAMM,OAAO,GAAGX,MAAM,CAAC,CAAD,CAAtB;EACA,MAAMY,WAAW,GAAGZ,MAAM,CAAC,CAAD,CAA1B;EACA,MAAMa,cAAc,GAAGb,MAAM,CAAmB,IAAnB,CAA7B;EACA,MAAM,CAACc,cAAD,EAAiBC,iBAAjB,IAAsCd,QAAQ,CAAIS,KAAJ,CAApD;;EAEA,IAAI,CAACJ,OAAL,EAAc;IACZ,MAAMU,UAAU,GAAGP,SAAS,CAACQ,OAA7B;IACAR,SAAS,CAACQ,OAAV,GAAoBP,KAApB;IACA,OAAO,CAACA,KAAD,EAAQM,UAAR,EAAoBb,cAApB,CAAP;EACD;;EAEDJ,SAAS,CAAC,MAAK;IACb,MAAMmB,QAAQ,GAAGC,IAAI,CAACC,GAAL,KAAaT,OAAO,CAACM,OAAtC;IACA,MAAMI,aAAa,GAAGd,QAAQ,GAAGW,QAAjC;IACA,MAAMI,YAAY,GAAGD,aAAa,IAAI,CAAjB,GAAqBb,gBAArB,GAAwC,CAA7D;IACA,MAAMe,KAAK,GAAGC,IAAI,CAACC,GAAL,CAASH,YAAT,EAAuBD,aAAvB,CAAd;;IACA,IAAIE,KAAK,IAAI,CAAb,EAAgB;MACdZ,OAAO,CAACM,OAAR,GAAkBE,IAAI,CAACC,GAAL,EAAlB;MACAL,iBAAiB,CAACL,KAAD,CAAjB;IACD,CAHD,MAGO;MACLgB,YAAY,CAACd,WAAW,CAACK,OAAb,CAAZ;;MACAJ,cAAc,CAACI,OAAf,GAAyB,MAAK;QAC5BJ,cAAc,CAACI,OAAf,GAAyB,IAAzB;QACAN,OAAO,CAACM,OAAR,GAAkBE,IAAI,CAACC,GAAL,EAAlB;QACAL,iBAAiB,CAACL,KAAD,CAAjB;MACD,CAJD;;MAKAE,WAAW,CAACK,OAAZ,GAAsBU,UAAU,CAACd,cAAc,CAACI,OAAhB,EAAyBM,KAAzB,CAAhC;IACD;;IACD,OAAO,MAAMG,YAAY,CAACd,WAAW,CAACK,OAAb,CAAzB;EACD,CAlBQ,EAkBN,CAACP,KAAD,CAlBM,CAAT;EAoBA,MAAMkB,eAAe,GAAG/B,WAAW,CAAC,MAAK;IACvCc,OAAO,CAACM,OAAR,GAAkB,CAAlB;;IACA,IAAIJ,cAAc,CAACI,OAAnB,EAA4B;MAC1BS,YAAY,CAACd,WAAW,CAACK,OAAb,CAAZ;MACAL,WAAW,CAACK,OAAZ,GAAsBU,UAAU,CAACd,cAAc,CAACI,OAAhB,EAAyB,CAAzB,CAAhC;IACD;;IACD,OAAO,MAAMS,YAAY,CAACd,WAAW,CAACK,OAAb,CAAzB;EACD,CAPkC,EAOhC,EAPgC,CAAnC;EASA,MAAMD,UAAU,GAAGP,SAAS,CAACQ,OAA7B;EACAR,SAAS,CAACQ,OAAV,GAAoBH,cAApB;EACA,OAAO,CAACA,cAAD,EAAiBE,UAAjB,EAA6BY,eAA7B,CAAP;AACD","names":["useCallback","useContext","useEffect","useRef","useState","ThrottledContext","EMPTY_FUNCTION","useThrottledContext","context","enabled","interval","firstActionDelay","prevValue","value","updated","updateTimer","updateCallback","throttledValue","setThrottledValue","returnPrev","current","timeDiff","Date","now","throttleDelay","initialDelay","delay","Math","max","clearTimeout","setTimeout","onTransitionEnd"],"sources":["C:\\Users\\nasti\\Desktop\\VK\\ForestEm\\Forest\\node_modules\\@vkontakte\\vk-mini-apps-router\\src\\hooks\\useThrottledContext.ts"],"sourcesContent":["import { Context, useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport { ThrottledContext } from '../contexts';\n\ntype NullableFunction = (() => void) | null;\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst EMPTY_FUNCTION = () => {};\n\nexport function useThrottledContext<T>(context: Context<T>): [T, T | null, () => void] {\n  const { enabled, interval, firstActionDelay } = useContext(ThrottledContext);\n  const prevValue = useRef<T | null>(null);\n  const value = useContext(context);\n  const updated = useRef(0);\n  const updateTimer = useRef(0);\n  const updateCallback = useRef<NullableFunction>(null);\n  const [throttledValue, setThrottledValue] = useState<T>(value);\n\n  if (!enabled) {\n    const returnPrev = prevValue.current;\n    prevValue.current = value;\n    return [value, returnPrev, EMPTY_FUNCTION];\n  }\n\n  useEffect(() => {\n    const timeDiff = Date.now() - updated.current;\n    const throttleDelay = interval - timeDiff;\n    const initialDelay = throttleDelay <= 0 ? firstActionDelay : 0;\n    const delay = Math.max(initialDelay, throttleDelay);\n    if (delay <= 0) {\n      updated.current = Date.now();\n      setThrottledValue(value);\n    } else {\n      clearTimeout(updateTimer.current);\n      updateCallback.current = () => {\n        updateCallback.current = null;\n        updated.current = Date.now();\n        setThrottledValue(value);\n      };\n      updateTimer.current = setTimeout(updateCallback.current, delay);\n    }\n    return () => clearTimeout(updateTimer.current);\n  }, [value]);\n\n  const onTransitionEnd = useCallback(() => {\n    updated.current = 0;\n    if (updateCallback.current) {\n      clearTimeout(updateTimer.current);\n      updateTimer.current = setTimeout(updateCallback.current, 1);\n    }\n    return () => clearTimeout(updateTimer.current);\n  }, []);\n\n  const returnPrev = prevValue.current;\n  prevValue.current = throttledValue;\n  return [throttledValue, returnPrev, onTransitionEnd];\n}\n"]},"metadata":{},"sourceType":"module"}