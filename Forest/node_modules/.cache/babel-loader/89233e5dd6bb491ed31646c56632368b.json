{"ast":null,"code":"import { createPath, parsePath, UNSAFE_warning as warning } from '@remix-run/router';\nimport { createLocation } from './createLocation';\nimport { getUrlBasedHistory } from './getUrlBasedHistory';\nconst DEFAULT_PATH_PARAM_NAME = 'path';\n/**\n * Специальная история для интеграции с платформой Mini Apps ВКонтакте.\n * Позволяет передавать в хэше путь вместе с параметрами запуска.\n */\n\nexport function createHashParamHistory() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const paramName = options.paramName || DEFAULT_PATH_PARAM_NAME;\n\n  function createHashParamLocation(window, globalHistory) {\n    const hashParams = new URLSearchParams(window.location.hash.substring(1));\n    const pathFromHash = hashParams.get(paramName) || '';\n    const {\n      pathname = '/',\n      search = '',\n      hash = ''\n    } = parsePath(pathFromHash);\n    return createLocation('', {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || 'default');\n  }\n\n  function createHashParamHref(window, to) {\n    const currentHashParams = new URLSearchParams(window.location.hash.substring(1));\n    const base = window.document.querySelector('base');\n    let href = '';\n\n    if (base && base.getAttribute('href')) {\n      const url = window.location.href;\n      const hashIndex = url.indexOf('#');\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    currentHashParams.set(paramName, typeof to === 'string' ? to : createPath(to));\n    return href + '#' + currentHashParams.toString();\n  }\n\n  function validateHashParamLocation(location, to) {\n    warning(location.pathname.startsWith('/'), `relative pathnames are not supported in hash param history.push(${JSON.stringify(to)})`);\n  }\n\n  return getUrlBasedHistory(createHashParamLocation, createHashParamHref, validateHashParamLocation, options);\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAT,EAAwCC,SAAxC,EAAuDC,cAAc,IAAIC,OAAzE,QAAwF,mBAAxF;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,SAASC,kBAAT,QAAmC,sBAAnC;AAMA,MAAMC,uBAAuB,GAAG,MAAhC;AAEA;;;;;AAIA,OAAM,SAAUC,sBAAV,GACiC;EAAA,IAArCC,OAAqC,uEAAF,EAAE;EAErC,MAAMC,SAAS,GAAGD,OAAO,CAACC,SAAR,IAAqBH,uBAAvC;;EAEA,SAASI,uBAAT,CACEC,MADF,EAEEC,aAFF,EAEkC;IAEhC,MAAMC,UAAU,GAAG,IAAIC,eAAJ,CAAoBH,MAAM,CAACI,QAAP,CAAgBC,IAAhB,CAAqBC,SAArB,CAA+B,CAA/B,CAApB,CAAnB;IACA,MAAMC,YAAY,GAAGL,UAAU,CAACM,GAAX,CAAeV,SAAf,KAA6B,EAAlD;IACA,MAAM;MACJW,QAAQ,GAAG,GADP;MAEJC,MAAM,GAAG,EAFL;MAGJL,IAAI,GAAG;IAHH,IAIFf,SAAS,CAACiB,YAAD,CAJb;IAKA,OAAOd,cAAc,CACnB,EADmB,EAEnB;MAAEgB,QAAF;MAAYC,MAAZ;MAAoBL;IAApB,CAFmB,EAGnB;IACAJ,aAAa,CAACU,KAAd,IAAuBV,aAAa,CAACU,KAAd,CAAoBC,GAA3C,IAAkD,IAJ/B,EAKnBX,aAAa,CAACU,KAAd,IAAuBV,aAAa,CAACU,KAAd,CAAoBE,GAA3C,IAAkD,SAL/B,CAArB;EAOD;;EAED,SAASC,mBAAT,CAA6Bd,MAA7B,EAA6Ce,EAA7C,EAAmD;IACjD,MAAMC,iBAAiB,GAAG,IAAIb,eAAJ,CAAoBH,MAAM,CAACI,QAAP,CAAgBC,IAAhB,CAAqBC,SAArB,CAA+B,CAA/B,CAApB,CAA1B;IACA,MAAMW,IAAI,GAAGjB,MAAM,CAACkB,QAAP,CAAgBC,aAAhB,CAA8B,MAA9B,CAAb;IACA,IAAIC,IAAI,GAAG,EAAX;;IAEA,IAAIH,IAAI,IAAIA,IAAI,CAACI,YAAL,CAAkB,MAAlB,CAAZ,EAAuC;MACrC,MAAMC,GAAG,GAAGtB,MAAM,CAACI,QAAP,CAAgBgB,IAA5B;MACA,MAAMG,SAAS,GAAGD,GAAG,CAACE,OAAJ,CAAY,GAAZ,CAAlB;MACAJ,IAAI,GAAGG,SAAS,KAAK,CAAC,CAAf,GAAmBD,GAAnB,GAAyBA,GAAG,CAACG,KAAJ,CAAU,CAAV,EAAaF,SAAb,CAAhC;IACD;;IAEDP,iBAAiB,CAACU,GAAlB,CAAsB5B,SAAtB,EAAiC,OAAOiB,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8B1B,UAAU,CAAC0B,EAAD,CAAzE;IACA,OAAOK,IAAI,GAAG,GAAP,GAAaJ,iBAAiB,CAACW,QAAlB,EAApB;EACD;;EAED,SAASC,yBAAT,CAAmCxB,QAAnC,EAAiEW,EAAjE,EAAuE;IACrEvB,OAAO,CACLY,QAAQ,CAACK,QAAT,CAAkBoB,UAAlB,CAA6B,GAA7B,CADK,EAEL,mEAAmEC,IAAI,CAACC,SAAL,CACjEhB,EADiE,CAElE,GAJI,CAAP;EAMD;;EAED,OAAOrB,kBAAkB,CACvBK,uBADuB,EAEvBe,mBAFuB,EAGvBc,yBAHuB,EAIvB/B,OAJuB,CAAzB;AAMD","names":["createPath","parsePath","UNSAFE_warning","warning","createLocation","getUrlBasedHistory","DEFAULT_PATH_PARAM_NAME","createHashParamHistory","options","paramName","createHashParamLocation","window","globalHistory","hashParams","URLSearchParams","location","hash","substring","pathFromHash","get","pathname","search","state","usr","key","createHashParamHref","to","currentHashParams","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","set","toString","validateHashParamLocation","startsWith","JSON","stringify"],"sources":["C:\\Users\\nasti\\Desktop\\VK\\ForestEm\\Forest\\node_modules\\@vkontakte\\vk-mini-apps-router\\src\\utils\\react-router-override\\HashParamHistory.ts"],"sourcesContent":["import { createPath, History, Location, parsePath, To, UNSAFE_warning as warning } from '@remix-run/router';\nimport { createLocation } from './createLocation';\nimport { UrlHistoryOptions } from './UrlHistoryOptions.type';\nimport { getUrlBasedHistory } from './getUrlBasedHistory';\n\nexport type HashParamHistoryOptions = UrlHistoryOptions & {\n  paramName?: string;\n};\n\nconst DEFAULT_PATH_PARAM_NAME = 'path';\n\n/**\n * Специальная история для интеграции с платформой Mini Apps ВКонтакте.\n * Позволяет передавать в хэше путь вместе с параметрами запуска.\n */\nexport function createHashParamHistory(\n  options: HashParamHistoryOptions = {}\n): History {\n  const paramName = options.paramName || DEFAULT_PATH_PARAM_NAME;\n\n  function createHashParamLocation(\n    window: Window,\n    globalHistory: Window['history']\n  ) {\n    const hashParams = new URLSearchParams(window.location.hash.substring(1));\n    const pathFromHash = hashParams.get(paramName) || '';\n    const {\n      pathname = '/',\n      search = '',\n      hash = '',\n    } = parsePath(pathFromHash);\n    return createLocation(\n      '',\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      globalHistory.state && globalHistory.state.usr || null,\n      globalHistory.state && globalHistory.state.key || 'default'\n    );\n  }\n\n  function createHashParamHref(window: Window, to: To) {\n    const currentHashParams = new URLSearchParams(window.location.hash.substring(1));\n    const base = window.document.querySelector('base');\n    let href = '';\n\n    if (base && base.getAttribute('href')) {\n      const url = window.location.href;\n      const hashIndex = url.indexOf('#');\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    currentHashParams.set(paramName, typeof to === 'string' ? to : createPath(to));\n    return href + '#' + currentHashParams.toString();\n  }\n\n  function validateHashParamLocation(location: Readonly<Location>, to: To) {\n    warning(\n      location.pathname.startsWith('/'),\n      `relative pathnames are not supported in hash param history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashParamLocation,\n    createHashParamHref,\n    validateHashParamLocation,\n    options\n  );\n}\n"]},"metadata":{},"sourceType":"module"}