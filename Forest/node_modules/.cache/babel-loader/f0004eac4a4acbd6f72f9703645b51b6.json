{"ast":null,"code":"export class NavigationTransaction {\n  constructor(actions) {\n    this.actions = actions;\n    this.pointer = 0;\n\n    this.resolve = () => {};\n\n    this.reject = () => {};\n\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n\n  get isMultiAction() {\n    return this.actions.length > 1;\n  }\n\n  get donePromise() {\n    return this.promise;\n  }\n\n  get finished() {\n    return this.pointer >= this.actions.length;\n  }\n\n  doNext() {\n    if (!this.finished) {\n      this.actions[this.pointer]();\n      this.pointer += 1;\n    } // this.finished изменился при выполнении предыдущего условия - нельзя объединить в if-else.\n\n\n    if (this.finished) {\n      this.resolve();\n    }\n  }\n\n}","map":{"version":3,"mappings":"AAAA,OAAM,MAAOA,qBAAP,CAA4B;EAShCC,YAAoBC,OAApB,EAA2C;IAAvB;IARZ,eAAU,CAAV;;IACA,eAAwB,MAAK,CAAgB,CAA7C;;IACA,cAAuB,MAAK,CAAgB,CAA5C;;IACA,eAAyB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAoB;MAC/D,KAAKD,OAAL,GAAeA,OAAf;MACA,KAAKC,MAAL,GAAcA,MAAd;IACD,CAHgC,CAAzB;EAKuC;;EAE9B,IAAbC,aAAa;IACf,OAAO,KAAKJ,OAAL,CAAaK,MAAb,GAAsB,CAA7B;EACD;;EAEc,IAAXC,WAAW;IACb,OAAO,KAAKC,OAAZ;EACD;;EAEW,IAARC,QAAQ;IACV,OAAO,KAAKC,OAAL,IAAgB,KAAKT,OAAL,CAAaK,MAApC;EACD;;EAEDK,MAAM;IACJ,IAAI,CAAC,KAAKF,QAAV,EAAoB;MAClB,KAAKR,OAAL,CAAa,KAAKS,OAAlB;MACA,KAAKA,OAAL,IAAgB,CAAhB;IACD,CAJG,CAKJ;;;IACA,IAAI,KAAKD,QAAT,EAAmB;MACjB,KAAKN,OAAL;IACD;EACF;;AAhC+B","names":["NavigationTransaction","constructor","actions","Promise","resolve","reject","isMultiAction","length","donePromise","promise","finished","pointer","doNext"],"sources":["C:\\Users\\nasti\\Desktop\\VK\\ForestEm\\Forest\\node_modules\\@vkontakte\\vk-mini-apps-router\\src\\entities\\NavigationTransaction.ts"],"sourcesContent":["export class NavigationTransaction {\n  private pointer = 0;\n  private resolve: VoidFunction = () => { /* Empty */ };\n  private reject: VoidFunction = () => { /* Empty */ };\n  private promise: Promise<void> = new Promise((resolve, reject) => {\n    this.resolve = resolve;\n    this.reject = reject;\n  });\n\n  constructor(private actions: VoidFunction[]) {}\n\n  get isMultiAction(): boolean {\n    return this.actions.length > 1;\n  }\n\n  get donePromise(): Promise<void> {\n    return this.promise;\n  }\n\n  get finished(): boolean {\n    return this.pointer >= this.actions.length;\n  }\n\n  doNext(): void {\n    if (!this.finished) {\n      this.actions[this.pointer]();\n      this.pointer += 1;\n    }\n    // this.finished изменился при выполнении предыдущего условия - нельзя объединить в if-else.\n    if (this.finished) {\n      this.resolve();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}