{"ast":null,"code":"import { STATE_KEY_SHOW_MODAL, STATE_KEY_SHOW_POPOUT } from '../const';\nimport { useState } from 'react';\nexport function getParamKeys(path) {\n  return path?.match(/\\/:[^\\/]+/g)?.map(param => param.replace('/', '')) ?? [];\n}\nexport function fillParamsIntoPath(path, params) {\n  const parameters = getParamKeys(path);\n\n  const paramInjector = (acc, param) => {\n    const paramName = param.replace(':', '');\n\n    if (!params[paramName]) {\n      throw new Error(`Missing parameter ${paramName} while building route ${path}`);\n    }\n\n    return acc.replace(param, params[paramName]);\n  };\n\n  return parameters.reduce(paramInjector, path);\n}\nexport function getRouteContext(state) {\n  let panelsHistory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return {\n    state,\n    match: state.matches.length ? state.matches[state.matches.length - 1] : undefined,\n    panelsHistory: panelsHistory\n  };\n}\nexport function isModalShown(location) {\n  return location.state && STATE_KEY_SHOW_MODAL in location.state;\n}\nexport function isPopoutShown(location) {\n  return location.state && STATE_KEY_SHOW_POPOUT in location.state;\n}\nexport function createKey() {\n  const allNumbersAndLetters = 36;\n  const positionAfterZeroAnDot = 2;\n  const keyLength = 7;\n  return Math.random().toString(allNumbersAndLetters).substring(positionAfterZeroAnDot, positionAfterZeroAnDot + keyLength);\n}\nexport function getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\nexport function useForceUpdate() {\n  const [, setState] = useState(0);\n  return () => {\n    setState(Date.now());\n  };\n}","map":{"version":3,"mappings":"AAGA,SAASA,oBAAT,EAA+BC,qBAA/B,QAA4D,UAA5D;AACA,SAASC,QAAT,QAAyB,OAAzB;AAEA,OAAM,SAAUC,YAAV,CAAuBC,IAAvB,EAA+C;EACnD,OAAOA,IAAI,EACPC,KADG,CACG,YADH,GAEHC,GAFG,CAEEC,KAAD,IAAWA,KAAK,CAACC,OAAN,CAAc,GAAd,EAAmB,EAAnB,CAFZ,KAEuC,EAF9C;AAGD;AAED,OAAM,SAAUC,kBAAV,CAA6BL,IAA7B,EAA2CM,MAA3C,EAAyD;EAC7D,MAAMC,UAAU,GAAGR,YAAY,CAACC,IAAD,CAA/B;;EACA,MAAMQ,aAAa,GAAG,CAACC,GAAD,EAAcN,KAAd,KAAuC;IAC3D,MAAMO,SAAS,GAAGP,KAAK,CAACC,OAAN,CAAc,GAAd,EAAmB,EAAnB,CAAlB;;IACA,IAAI,CAACE,MAAM,CAACI,SAAD,CAAX,EAAwB;MACtB,MAAM,IAAIC,KAAJ,CAAU,qBAAqBD,SAAS,yBAAyBV,IAAI,EAArE,CAAN;IACD;;IACD,OAAOS,GAAG,CAACL,OAAJ,CAAYD,KAAZ,EAAmBG,MAAM,CAACI,SAAD,CAAzB,CAAP;EACD,CAND;;EAOA,OAAOH,UAAU,CAACK,MAAX,CAAkBJ,aAAlB,EAAiCR,IAAjC,CAAP;AACD;AAED,OAAM,SAAUa,eAAV,CAA0BC,KAA1B,EAA0E;EAAA,IAA5BC,aAA4B,uEAAF,EAAE;EAC9E,OAAO;IACLD,KADK;IAELb,KAAK,EAAEa,KAAK,CAACE,OAAN,CAAcC,MAAd,GAAuBH,KAAK,CAACE,OAAN,CAAcF,KAAK,CAACE,OAAN,CAAcC,MAAd,GAAuB,CAArC,CAAvB,GAA6GC,SAF/G;IAGLH,aAAa,EAAEA;EAHV,CAAP;AAKD;AAED,OAAM,SAAUI,YAAV,CAAuBC,QAAvB,EAAyC;EAC7C,OAAOA,QAAQ,CAACN,KAAT,IAAkBlB,oBAAoB,IAAIwB,QAAQ,CAACN,KAA1D;AACD;AAED,OAAM,SAAUO,aAAV,CAAwBD,QAAxB,EAA0C;EAC9C,OAAOA,QAAQ,CAACN,KAAT,IAAkBjB,qBAAqB,IAAIuB,QAAQ,CAACN,KAA3D;AACD;AAED,OAAM,SAAUQ,SAAV,GAAmB;EACvB,MAAMC,oBAAoB,GAAG,EAA7B;EACA,MAAMC,sBAAsB,GAAG,CAA/B;EACA,MAAMC,SAAS,GAAG,CAAlB;EACA,OAAOC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuBL,oBAAvB,EAA6CM,SAA7C,CAAuDL,sBAAvD,EAA+EA,sBAAsB,GAAGC,SAAxG,CAAP;AACD;AAED,OAAM,SAAUK,cAAV,CAAyBC,gBAAzB,EAAgF;EACpF,OAAOA,gBAAgB,CAACC,WAAjB,IAAgCD,gBAAgB,CAACE,IAAjD,IAAyD,WAAhE;AACD;AAED,OAAM,SAAUC,cAAV,GAAwB;EAC5B,MAAM,GAAGC,QAAH,IAAerC,QAAQ,CAAC,CAAD,CAA7B;EAEA,OAAO,MAAK;IACVqC,QAAQ,CAACC,IAAI,CAACC,GAAL,EAAD,CAAR;EACD,CAFD;AAGD","names":["STATE_KEY_SHOW_MODAL","STATE_KEY_SHOW_POPOUT","useState","getParamKeys","path","match","map","param","replace","fillParamsIntoPath","params","parameters","paramInjector","acc","paramName","Error","reduce","getRouteContext","state","panelsHistory","matches","length","undefined","isModalShown","location","isPopoutShown","createKey","allNumbersAndLetters","positionAfterZeroAnDot","keyLength","Math","random","toString","substring","getDisplayName","WrappedComponent","displayName","name","useForceUpdate","setState","Date","now"],"sources":["C:\\Users\\nasti\\Desktop\\VK\\ForestEm\\Forest\\node_modules\\@vkontakte\\vk-mini-apps-router\\src\\utils\\utils.ts"],"sourcesContent":["import { AgnosticRouteMatch, Location, Params, RouterState } from '@remix-run/router';\nimport { RouteContextObject } from '../contexts';\nimport { PageInternal } from '../type';\nimport { STATE_KEY_SHOW_MODAL, STATE_KEY_SHOW_POPOUT } from '../const';\nimport { useState } from 'react';\n\nexport function getParamKeys(path: string | undefined): string[] {\n  return path\n    ?.match(/\\/:[^\\/]+/g)\n    ?.map((param) => param.replace('/', '')) ?? [];\n}\n\nexport function fillParamsIntoPath(path: string, params: Params): string {\n  const parameters = getParamKeys(path);\n  const paramInjector = (acc: string, param: string): string => {\n    const paramName = param.replace(':', '');\n    if (!params[paramName]) {\n      throw new Error(`Missing parameter ${paramName} while building route ${path}`);\n    }\n    return acc.replace(param, params[paramName] as string);\n  };\n  return parameters.reduce(paramInjector, path);\n}\n\nexport function getRouteContext(state: RouterState, panelsHistory: string[] = []): RouteContextObject {\n  return {\n    state,\n    match: state.matches.length ? state.matches[state.matches.length - 1] as AgnosticRouteMatch<string, PageInternal> : undefined,\n    panelsHistory: panelsHistory,\n  };\n}\n\nexport function isModalShown(location: Location): boolean {\n  return location.state && STATE_KEY_SHOW_MODAL in location.state;\n}\n\nexport function isPopoutShown(location: Location): boolean {\n  return location.state && STATE_KEY_SHOW_POPOUT in location.state;\n}\n\nexport function createKey() {\n  const allNumbersAndLetters = 36;\n  const positionAfterZeroAnDot = 2;\n  const keyLength = 7;\n  return Math.random().toString(allNumbersAndLetters).substring(positionAfterZeroAnDot, positionAfterZeroAnDot + keyLength);\n}\n\nexport function getDisplayName(WrappedComponent: {displayName?: string; name?: string}) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n\nexport function useForceUpdate() {\n  const [, setState] = useState(0);\n\n  return () => {\n    setState(Date.now());\n  };\n}\n"]},"metadata":{},"sourceType":"module"}