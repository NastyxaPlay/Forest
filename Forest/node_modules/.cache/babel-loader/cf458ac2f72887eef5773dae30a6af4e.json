{"ast":null,"code":"import { resolveTo, UNSAFE_getPathContributingMatches as getPathContributingMatches } from '@remix-run/router';\nimport { RouterContext } from '../contexts';\nimport { useContext, useMemo } from 'react';\nimport { useLocation } from './hooks';\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/hooks/use-resolved-path\n */\n\nexport function useResolvedPath(to) {\n  let {\n    relative\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    router: {\n      state: {\n        matches\n      }\n    }\n  } = useContext(RouterContext);\n  const {\n    pathname: locationPathname\n  } = useLocation();\n  const routePathnamesJson = JSON.stringify(getPathContributingMatches(matches).map(match => match.pathnameBase));\n  return useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === 'path'), [to, routePathnamesJson, locationPathname, relative]);\n}","map":{"version":3,"mappings":"AAAA,SAGEA,SAHF,EAKEC,iCAAiC,IAAIC,0BALvC,QAMO,mBANP;AAOA,SAASC,aAAT,QAA8B,aAA9B;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,SAA5B;AAEA;;;;;;AAKA,OAAM,SAAUC,eAAV,CACJC,EADI,EAEiD;EAAA,IAArD;IAAEC;EAAF,CAAqD,uEAAF,EAAE;EAErD,MAAM;IAAEC,MAAM,EAAE;MAAEC,KAAK,EAAE;QAAEC;MAAF;IAAT;EAAV,IAAqCR,UAAU,CAACD,aAAD,CAArD;EACA,MAAM;IAAEU,QAAQ,EAAEC;EAAZ,IAAiCR,WAAW,EAAlD;EAEA,MAAMS,kBAAkB,GAAGC,IAAI,CAACC,SAAL,CACzBf,0BAA0B,CAACU,OAAD,CAA1B,CAAoCM,GAApC,CAAyCC,KAAD,IAAWA,KAAK,CAACC,YAAzD,CADyB,CAA3B;EAIA,OAAOf,OAAO,CACZ,MACEL,SAAS,CACPQ,EADO,EAEPQ,IAAI,CAACK,KAAL,CAAWN,kBAAX,CAFO,EAGPD,gBAHO,EAIPL,QAAQ,KAAK,MAJN,CAFC,EAQZ,CAACD,EAAD,EAAKO,kBAAL,EAAyBD,gBAAzB,EAA2CL,QAA3C,CARY,CAAd;AAUD","names":["resolveTo","UNSAFE_getPathContributingMatches","getPathContributingMatches","RouterContext","useContext","useMemo","useLocation","useResolvedPath","to","relative","router","state","matches","pathname","locationPathname","routePathnamesJson","JSON","stringify","map","match","pathnameBase","parse"],"sources":["C:\\Users\\nasti\\Desktop\\VK\\ForestEm\\Forest\\node_modules\\@vkontakte\\vk-mini-apps-router\\src\\hooks\\useResolvedPath.ts"],"sourcesContent":["import {\n  Path,\n  RelativeRoutingType,\n  resolveTo,\n  To,\n  UNSAFE_getPathContributingMatches as getPathContributingMatches,\n} from '@remix-run/router';\nimport { RouterContext } from '../contexts';\nimport { useContext, useMemo } from 'react';\nimport { useLocation } from './hooks';\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/hooks/use-resolved-path\n */\nexport function useResolvedPath(\n  to: To,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): Path {\n  const { router: { state: { matches } } } = useContext(RouterContext);\n  const { pathname: locationPathname } = useLocation();\n\n  const routePathnamesJson = JSON.stringify(\n    getPathContributingMatches(matches).map((match) => match.pathnameBase)\n  );\n\n  return useMemo(\n    () =>\n      resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname,\n        relative === 'path'\n      ),\n    [to, routePathnamesJson, locationPathname, relative]\n  );\n}\n"]},"metadata":{},"sourceType":"module"}