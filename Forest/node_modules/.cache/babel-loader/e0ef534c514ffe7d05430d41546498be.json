{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\"; // @ts-expect-error\n\nimport { Link } from '@vkontakte/vkui';\nimport { useHref } from '../hooks/useHref';\nimport { forwardRef } from 'react';\nimport { useLinkClickHandler } from '../hooks/useLinkClickHandler';\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\nexport const RouterLink = forwardRef(function (_ref, ref) {\n  let {\n    to,\n    relative,\n    replace,\n    target,\n    reloadDocument,\n    onClick,\n    ...rest\n  } = _ref;\n  // Rendered into <a href> for absolute URLs\n  let absoluteHref;\n  let isExternal = false;\n\n  if (typeof to === 'string' && ABSOLUTE_URL_REGEX.test(to)) {\n    // Render the absolute href server- and client-side\n    absoluteHref = to; // Only check for external origins client-side\n\n    if (isBrowser) {\n      const currentUrl = new URL(window.location.href);\n      const targetUrl = to.startsWith('//') ? new URL(currentUrl.protocol + to) : new URL(to);\n      const path = targetUrl.pathname;\n\n      if (targetUrl.origin === currentUrl.origin) {\n        // Strip the protocol/origin/basename for same-origin absolute URLs\n        to = path + targetUrl.search + targetUrl.hash;\n      } else {\n        isExternal = true;\n      }\n    }\n  }\n\n  const href = useHref(to, {\n    relative\n  });\n  const internalOnClick = useLinkClickHandler(to, {\n    replace,\n    target,\n    relative\n  });\n\n  function handleClick(event) {\n    if (onClick) onClick(event);\n\n    if (!event.defaultPrevented) {\n      internalOnClick(event);\n    }\n  }\n\n  return _jsx(Link, { ...rest,\n    href: absoluteHref || href,\n    onClick: isExternal || reloadDocument ? onClick : handleClick,\n    ref: ref,\n    target: target\n  });\n});","map":{"version":3,"mappings":"iDAAA;;AACA,SAASA,IAAT,QAAqB,iBAArB;AACA,SAASC,OAAT,QAAwB,kBAAxB;AAEA,SAGEC,UAHF,QAMO,OANP;AAOA,SAASC,mBAAT,QAAoC,8BAApC;AA+BA,MAAMC,kBAAkB,GAAG,+BAA3B;AAEA,MAAMC,SAAS,GACb,OAAOC,MAAP,KAAkB,WAAlB,IACA,OAAOA,MAAM,CAACC,QAAd,KAA2B,WAD3B,IAEA,OAAOD,MAAM,CAACC,QAAP,CAAgBC,aAAvB,KAAyC,WAH3C;AAKA,OAAO,MAAMC,UAAU,GAAGP,UAAU,CAClC,gBAUEQ,GAVF,EAUK;EAAA,IATH;IACEC,EADF;IAEEC,QAFF;IAGEC,OAHF;IAIEC,MAJF;IAKEC,cALF;IAMEC,OANF;IAOE,GAAGC;EAPL,CASG;EAEH;EACA,IAAIC,YAAJ;EACA,IAAIC,UAAU,GAAG,KAAjB;;EAEA,IAAI,OAAOR,EAAP,KAAc,QAAd,IAA0BP,kBAAkB,CAACgB,IAAnB,CAAwBT,EAAxB,CAA9B,EAA2D;IACzD;IACAO,YAAY,GAAGP,EAAf,CAFyD,CAIzD;;IACA,IAAIN,SAAJ,EAAe;MACb,MAAMgB,UAAU,GAAG,IAAIC,GAAJ,CAAQhB,MAAM,CAACiB,QAAP,CAAgBC,IAAxB,CAAnB;MACA,MAAMC,SAAS,GAAGd,EAAE,CAACe,UAAH,CAAc,IAAd,IACd,IAAIJ,GAAJ,CAAQD,UAAU,CAACM,QAAX,GAAsBhB,EAA9B,CADc,GAEd,IAAIW,GAAJ,CAAQX,EAAR,CAFJ;MAGA,MAAMiB,IAAI,GAAGH,SAAS,CAACI,QAAvB;;MAEA,IAAIJ,SAAS,CAACK,MAAV,KAAqBT,UAAU,CAACS,MAApC,EAA4C;QAC1C;QACAnB,EAAE,GAAGiB,IAAI,GAAGH,SAAS,CAACM,MAAjB,GAA0BN,SAAS,CAACO,IAAzC;MACD,CAHD,MAGO;QACLb,UAAU,GAAG,IAAb;MACD;IACF;EACF;;EAED,MAAMK,IAAI,GAAGvB,OAAO,CAACU,EAAD,EAAK;IAAEC;EAAF,CAAL,CAApB;EAEA,MAAMqB,eAAe,GAAG9B,mBAAmB,CAACQ,EAAD,EAAK;IAC9CE,OAD8C;IAE9CC,MAF8C;IAG9CF;EAH8C,CAAL,CAA3C;;EAMA,SAASsB,WAAT,CACEC,KADF,EACuD;IAErD,IAAInB,OAAJ,EAAaA,OAAO,CAACmB,KAAD,CAAP;;IACb,IAAI,CAACA,KAAK,CAACC,gBAAX,EAA6B;MAC3BH,eAAe,CAACE,KAAD,CAAf;IACD;EACF;;EAED,OACEE,KAACrC,IAAD,EAAK,KACCiB,IADD;IAEHO,IAAI,EAAEN,YAAY,IAAIM,IAFnB;IAGHR,OAAO,EAAEG,UAAU,IAAIJ,cAAd,GAA+BC,OAA/B,GAAyCkB,WAH/C;IAIHxB,GAAG,EAAEA,GAJF;IAKHI,MAAM,EAAEA;EALL,CAAL,CADF;AASD,CAhEiC,CAA7B","names":["Link","useHref","forwardRef","useLinkClickHandler","ABSOLUTE_URL_REGEX","isBrowser","window","document","createElement","RouterLink","ref","to","relative","replace","target","reloadDocument","onClick","rest","absoluteHref","isExternal","test","currentUrl","URL","location","href","targetUrl","startsWith","protocol","path","pathname","origin","search","hash","internalOnClick","handleClick","event","defaultPrevented","_jsx"],"sources":["C:\\Users\\nasti\\Desktop\\VK\\ForestEm\\Forest\\node_modules\\@vkontakte\\vk-mini-apps-router\\src\\components\\RouterLink.tsx"],"sourcesContent":["// @ts-expect-error\nimport { Link } from '@vkontakte/vkui';\nimport { useHref } from '../hooks/useHref';\nimport { RelativeRoutingType, To } from '@remix-run/router';\nimport {\n  AnchorHTMLAttributes,\n  CSSProperties,\n  forwardRef,\n  ReactNode,\n  MouseEvent as ReactMouseEvent,\n} from 'react';\nimport { useLinkClickHandler } from '../hooks/useLinkClickHandler';\n\nexport interface LinkProps\n  extends Omit<AnchorHTMLAttributes<HTMLAnchorElement>, 'href'> {\n  reloadDocument?: boolean;\n  replace?: boolean;\n  relative?: RelativeRoutingType;\n  to: To;\n}\n\nexport interface RouterLinkProps\n  extends Omit<LinkProps, 'className' | 'style' | 'children'> {\n  children?:\n  | ReactNode\n  | ((props: { isActive: boolean; isPending: boolean }) => ReactNode);\n  caseSensitive?: boolean;\n  className?:\n  | string\n  | ((props: {\n    isActive: boolean;\n    isPending: boolean;\n  }) => string | undefined);\n  end?: boolean;\n  style?:\n  | CSSProperties\n  | ((props: {\n    isActive: boolean;\n    isPending: boolean;\n  }) => CSSProperties | undefined);\n}\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst isBrowser =\n  typeof window !== 'undefined' &&\n  typeof window.document !== 'undefined' &&\n  typeof window.document.createElement !== 'undefined';\n\nexport const RouterLink = forwardRef<HTMLAnchorElement, RouterLinkProps>(\n  function(\n    {\n      to,\n      relative,\n      replace,\n      target,\n      reloadDocument,\n      onClick,\n      ...rest\n    }: RouterLinkProps,\n    ref,\n  ) {\n    // Rendered into <a href> for absolute URLs\n    let absoluteHref;\n    let isExternal = false;\n\n    if (typeof to === 'string' && ABSOLUTE_URL_REGEX.test(to)) {\n      // Render the absolute href server- and client-side\n      absoluteHref = to;\n\n      // Only check for external origins client-side\n      if (isBrowser) {\n        const currentUrl = new URL(window.location.href);\n        const targetUrl = to.startsWith('//')\n          ? new URL(currentUrl.protocol + to)\n          : new URL(to);\n        const path = targetUrl.pathname;\n\n        if (targetUrl.origin === currentUrl.origin) {\n          // Strip the protocol/origin/basename for same-origin absolute URLs\n          to = path + targetUrl.search + targetUrl.hash;\n        } else {\n          isExternal = true;\n        }\n      }\n    }\n    \n    const href = useHref(to, { relative });\n\n    const internalOnClick = useLinkClickHandler(to, {\n      replace,\n      target,\n      relative,\n    });\n\n    function handleClick(\n      event: ReactMouseEvent<HTMLAnchorElement, MouseEvent>\n    ) {\n      if (onClick) onClick(event);\n      if (!event.defaultPrevented) {\n        internalOnClick(event);\n      }\n    }\n\n    return (\n      <Link\n        {...rest}\n        href={absoluteHref || href}\n        onClick={isExternal || reloadDocument ? onClick : handleClick}\n        ref={ref}\n        target={target}\n      ></Link>\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}