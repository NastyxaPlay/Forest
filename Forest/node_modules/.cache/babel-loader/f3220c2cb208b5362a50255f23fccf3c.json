{"ast":null,"code":"import { uniqueKey } from './common';\nexport class RootConfig {\n  constructor(id, views) {\n    this.id = id;\n    this.views = views;\n\n    if (!views.length) {\n      throw new Error(`Trying to create root ${id} without views. Root must have at least one view.`);\n    }\n\n    views.forEach(views => {\n      // @ts-expect-error\n      this[uniqueKey(this, views.id)] = views;\n    });\n  }\n\n  get children() {\n    return this.views;\n  }\n\n  getRoutes() {\n    return this.views.map(view => view.getRoutes()).flat().map(viewRoute => ({ ...viewRoute,\n      root: this.id\n    }));\n  }\n\n}\nexport function createRoot(id, views) {\n  return new RootConfig(id, views);\n}","map":{"version":3,"mappings":"AACA,SAAyDA,SAAzD,QAA0E,UAA1E;AAUA,OAAM,MAAOC,UAAP,CAAiB;EACrBC,YAAmBC,EAAnB,EAAkCC,KAAlC,EAA6D;IAA1C;IAAe;;IAChC,IAAI,CAACA,KAAK,CAACC,MAAX,EAAmB;MACjB,MAAM,IAAIC,KAAJ,CAAU,yBAAyBH,EAAE,mDAArC,CAAN;IACD;;IACDC,KAAK,CAACG,OAAN,CAAeH,KAAD,IAAU;MACtB;MACA,KAAKJ,SAAS,CAAC,IAAD,EAAOI,KAAK,CAACD,EAAb,CAAd,IAAkCC,KAAlC;IACD,CAHD;EAID;;EAEW,IAARI,QAAQ;IACV,OAAO,KAAKJ,KAAZ;EACD;;EAEDK,SAAS;IACP,OAAO,KAAKL,KAAL,CACJM,GADI,CACCC,IAAD,IAAUA,IAAI,CAACF,SAAL,EADV,EAEJG,IAFI,GAGJF,GAHI,CAGCG,SAAD,KAAgB,EAAE,GAAGA,SAAL;MAAgBC,IAAI,EAAE,KAAKX;IAA3B,CAAhB,CAHA,CAAP;EAID;;AApBoB;AAgDvB,OAAM,SAAUY,UAAV,CAAuCZ,EAAvC,EAA8CC,KAA9C,EAA0D;EAC9D,OAAO,IAAIH,UAAJ,CAAkBE,EAAlB,EAAsBC,KAAtB,CAAP;AACD","names":["uniqueKey","RootConfig","constructor","id","views","length","Error","forEach","children","getRoutes","map","view","flat","viewRoute","root","createRoot"],"sources":["C:\\Users\\nasti\\Desktop\\VK\\ForestEm\\Forest\\node_modules\\@vkontakte\\vk-mini-apps-router\\src\\page-types\\RootConfig.ts"],"sourcesContent":["import { ViewConfig } from './ViewConfig';\nimport { AddChild, HasChildren, HasId, RepresentsRoutes, uniqueKey } from './common';\nimport { CommonRouteObject } from '../type';\n\ninterface RootRoutePartial extends CommonRouteObject {\n  root: string;\n  view: string;\n  panel: string;\n  modal?: string;\n}\n\nexport class RootConfig<T extends string> implements HasId<T>, HasChildren<ViewConfig<string>>, RepresentsRoutes<RootRoutePartial> {\n  constructor(public id: T, private views: ViewConfig<string>[]) {\n    if (!views.length) {\n      throw new Error(`Trying to create root ${id} without views. Root must have at least one view.`);\n    }\n    views.forEach((views) => {\n      // @ts-expect-error\n      this[uniqueKey(this, views.id)] = views;\n    });\n  }\n\n  get children(): ViewConfig<string>[] {\n    return this.views;\n  }\n\n  getRoutes(): RootRoutePartial[] {\n    return this.views\n      .map((view) => view.getRoutes())\n      .flat()\n      .map((viewRoute) => ({ ...viewRoute, root: this.id }));\n  }\n}\n\nexport function createRoot<\n  T extends string, A extends ViewConfig<any>, B extends ViewConfig<any>, C extends ViewConfig<any>, D extends ViewConfig<any>,\n  E extends ViewConfig<any>, F extends ViewConfig<any>, G extends ViewConfig<any>,\n>(id: T, panels: [A, B, C, D, E, F, G]): AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<\nAddChild<RootConfig<T>, A>, B>, C>, D>, E>, F>, G>;\nexport function createRoot<\n  T extends string, A extends ViewConfig<any>, B extends ViewConfig<any>, C extends ViewConfig<any>, D extends ViewConfig<any>,\n  E extends ViewConfig<any>, F extends ViewConfig<any>,\n>(id: T, panels: [A, B, C, D, E, F]): AddChild<AddChild<AddChild<AddChild<AddChild<\nAddChild<RootConfig<T>, A>, B>, C>, D>, E>, F>;\nexport function createRoot<\n  T extends string, A extends ViewConfig<any>, B extends ViewConfig<any>, C extends ViewConfig<any>, D extends ViewConfig<any>,\n  E extends ViewConfig<any>,\n>(id: T, panels: [A, B, C, D, E]): AddChild<AddChild<AddChild<AddChild<AddChild<RootConfig<T>, A>, B>, C>, D>, E>;\nexport function createRoot<\n  T extends string, A extends ViewConfig<any>, B extends ViewConfig<any>, C extends ViewConfig<any>, D extends ViewConfig<any>,\n>(id: T, panels: [A, B, C, D]): AddChild<AddChild<AddChild<AddChild<RootConfig<T>, A>, B>, C>, D>;\nexport function createRoot<\n  T extends string, A extends ViewConfig<any>, B extends ViewConfig<any>, C extends ViewConfig<any>,\n>(id: T, panels: [A, B, C]): AddChild<AddChild<AddChild<RootConfig<T>, A>, B>, C>;\nexport function createRoot<T extends string,\n  A extends ViewConfig<any>, B extends ViewConfig<any>,\n>(id: T, views: [A, B]): AddChild<AddChild<RootConfig<T>, A>, B>;\nexport function createRoot<T extends string, A extends ViewConfig<any>>(id: T, views: [A]): AddChild<RootConfig<T>, A>;\nexport function createRoot<T extends string>(id: T, views: ViewConfig<any>[]): RootConfig<T>;\nexport function createRoot<T extends string>(id: T, views: any[]): RootConfig<T> {\n  return new RootConfig<T>(id, views);\n}\n"]},"metadata":{},"sourceType":"module"}