{"ast":null,"code":"import { Action } from '@remix-run/router';\nimport { getRouteContext } from '../utils/utils';\nimport { STATE_KEY_SHOW_POPOUT } from '../const';\nexport class ViewHistory {\n  constructor() {\n    this.history = [];\n    this.positionInternal = -1;\n  }\n\n  updateNavigation(state) {\n    const record = this.getViewRecordFromState(state);\n\n    if (!record) {\n      return;\n    }\n\n    switch (state.historyAction) {\n      case Action.Push:\n        this.push(record);\n        break;\n\n      case Action.Pop:\n        if (this.hasKey(record.locationKey)) {\n          this.pop(record);\n        } else {\n          // В случае, если пользователь введет в адресную строку новый хэш, мы поймаем POP событие с новой локацией.\n          this.push(record);\n        }\n\n        break;\n\n      case Action.Replace:\n        this.replace(record);\n        break;\n    }\n  }\n\n  get isFirstPage() {\n    return this.positionInternal < 1;\n  }\n\n  get panelsHistory() {\n    if (this.positionInternal < 0) {\n      return [];\n    }\n\n    const currentView = this.history[this.positionInternal].view;\n    const reversedClone = this.history.slice(0, this.positionInternal + 1).reverse();\n    const rightLimit = reversedClone.findIndex(item => item.view !== currentView);\n    const historyCopy = reversedClone.slice(0, rightLimit > -1 ? rightLimit : reversedClone.length).filter(item => !item.modal && !item.popout).reverse();\n    return historyCopy.map(_ref => {\n      let {\n        panel\n      } = _ref;\n      return panel;\n    });\n  }\n\n  get position() {\n    return this.positionInternal;\n  }\n\n  isPopForward(historyAction, key) {\n    const newPosition = this.history.findIndex(_ref2 => {\n      let {\n        locationKey\n      } = _ref2;\n      return locationKey === key;\n    });\n    return historyAction === Action.Pop && newPosition > this.position;\n  }\n\n  isPopBackward(historyAction, key) {\n    const newPosition = this.history.findIndex(_ref3 => {\n      let {\n        locationKey\n      } = _ref3;\n      return locationKey === key;\n    });\n    return historyAction === Action.Pop && newPosition <= this.position;\n  }\n\n  resetHistory() {\n    this.positionInternal = -1;\n    this.history = [];\n  }\n\n  push(record) {\n    this.history = this.history.slice(0, this.positionInternal + 1);\n    this.history.push(record);\n    this.positionInternal = this.history.length - 1;\n  }\n\n  replace(record) {\n    this.history[this.positionInternal] = record;\n  }\n\n  pop(record) {\n    this.positionInternal = this.history.findIndex(_ref4 => {\n      let {\n        locationKey\n      } = _ref4;\n      return locationKey === record.locationKey;\n    });\n  }\n\n  hasKey(key) {\n    return Boolean(this.history.find(_ref5 => {\n      let {\n        locationKey\n      } = _ref5;\n      return locationKey === key;\n    }));\n  }\n\n  getViewRecordFromState(state) {\n    const context = getRouteContext(state);\n\n    if (!context.match) {\n      return undefined;\n    }\n\n    const {\n      route\n    } = context.match;\n    return {\n      view: route.view,\n      panel: route.panel,\n      modal: 'modal' in route ? route.modal : undefined,\n      popout: state.location.state?.[STATE_KEY_SHOW_POPOUT],\n      locationKey: state.location.key\n    };\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Action","getRouteContext","STATE_KEY_SHOW_POPOUT","ViewHistory","constructor","updateNavigation","state","record","getViewRecordFromState","historyAction","Push","push","Pop","hasKey","locationKey","pop","Replace","replace","isFirstPage","positionInternal","panelsHistory","currentView","history","view","reversedClone","slice","reverse","rightLimit","findIndex","item","historyCopy","length","filter","modal","popout","map","panel","position","isPopForward","key","newPosition","isPopBackward","resetHistory","Boolean","find","context","match","undefined","route","location"],"sources":["C:\\Users\\nasti\\Desktop\\VK\\ForestEm\\Forest\\node_modules\\@vkontakte\\vk-mini-apps-router\\src\\services\\ViewHistory.ts"],"sourcesContent":["import { Action, RouterState } from '@remix-run/router';\nimport { getRouteContext } from '../utils/utils';\nimport { STATE_KEY_SHOW_POPOUT } from '../const';\nimport { ViewNavigationRecord } from './ViewNavigationRecord.type';\n\nexport class ViewHistory {\n  private history: ViewNavigationRecord[] = [];\n  private positionInternal = -1;\n\n  updateNavigation(state: RouterState): void {\n    const record = this.getViewRecordFromState(state);\n    if (!record) {\n      return;\n    }\n    switch (state.historyAction) {\n      case Action.Push:\n        this.push(record);\n        break;\n      case Action.Pop:\n        if (this.hasKey(record.locationKey)) {\n          this.pop(record);\n        } else {\n          // В случае, если пользователь введет в адресную строку новый хэш, мы поймаем POP событие с новой локацией.\n          this.push(record);\n        }\n        break;\n      case Action.Replace:\n        this.replace(record);\n        break;\n    }\n  }\n\n  get isFirstPage(): boolean {\n    return this.positionInternal < 1;\n  }\n\n  get panelsHistory(): string[] {\n    if (this.positionInternal < 0) {\n      return [];\n    }\n    const currentView = this.history[this.positionInternal].view;\n    const reversedClone = this.history.slice(0, this.positionInternal + 1).reverse();\n    const rightLimit = reversedClone.findIndex((item) => item.view !== currentView);\n    const historyCopy = reversedClone\n      .slice(0, rightLimit > -1 ? rightLimit : reversedClone.length)\n      .filter((item) => !item.modal && !item.popout)\n      .reverse();\n    return historyCopy.map(({ panel }) => panel);\n  }\n\n  get position(): number {\n    return this.positionInternal;\n  }\n\n  isPopForward(historyAction: Action, key: string): boolean {\n    const newPosition = this.history.findIndex(({ locationKey }) => locationKey === key);\n    return historyAction === Action.Pop && newPosition > this.position;\n  }\n\n  isPopBackward(historyAction: Action, key: string): boolean {\n    const newPosition = this.history.findIndex(({ locationKey }) => locationKey === key);\n    return historyAction === Action.Pop && newPosition <= this.position;\n  }\n\n  resetHistory() {\n    this.positionInternal = -1;\n    this.history = [];\n  }\n\n  private push(record: ViewNavigationRecord): void {\n    this.history = this.history.slice(0, this.positionInternal + 1);\n    this.history.push(record);\n    this.positionInternal = this.history.length - 1;\n  }\n\n  private replace(record: ViewNavigationRecord): void {\n    this.history[this.positionInternal] = record;\n  }\n\n  private pop(record: ViewNavigationRecord): void {\n    this.positionInternal = this.history.findIndex(\n      ({ locationKey }) => locationKey === record.locationKey,\n    );\n  }\n\n  private hasKey(key: string): boolean {\n    return Boolean(this.history.find(({ locationKey }) => locationKey === key));\n  }\n\n  private getViewRecordFromState(state: RouterState): ViewNavigationRecord | undefined {\n    const context = getRouteContext(state);\n    if (!context.match) {\n      return undefined;\n    }\n    const { route } = context.match;\n    return {\n      view: route.view,\n      panel: route.panel,\n      modal: 'modal' in route ? route.modal : undefined,\n      popout: state.location.state?.[STATE_KEY_SHOW_POPOUT],\n      locationKey: state.location.key,\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}