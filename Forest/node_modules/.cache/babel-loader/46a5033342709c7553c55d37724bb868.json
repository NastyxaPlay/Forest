{"ast":null,"code":"import { NavigationTransaction } from '../entities/NavigationTransaction';\nimport { fillParamsIntoPath } from './utils';\nimport { createSearchParams } from './createSearchParams';\nimport { SEARCH_PARAM_INFLATE } from '../const';\n\nfunction flattenBranch(leafs, parents) {\n  return leafs.map(leaf => {\n    const leafWithParents = { ...leaf,\n      parents\n    };\n    return leaf.children ? flattenBranch(leaf.children, [...parents, leafWithParents]) : leafWithParents;\n  }).flat();\n}\n\nexport function fillHistory(config, routeNavigator, context, transactionExecutor) {\n  const leafs = flattenBranch(config, []);\n  const currentLocation = context.state.location;\n  const params = context.match?.params ?? {};\n  const targetPath = context.match?.route.path;\n  const targetLeaf = leafs.find(leaf => leaf.path === targetPath);\n\n  if (!targetLeaf) {\n    return;\n  }\n\n  const records = targetLeaf.parents.map(_ref => {\n    let {\n      path\n    } = _ref;\n    return fillParamsIntoPath(path, params);\n  });\n  setTimeout(() => {\n    if (records.length) {\n      const searchParams = createSearchParams(currentLocation.search);\n      searchParams.delete(SEARCH_PARAM_INFLATE);\n      const search = searchParams.toString().length > 0 ? `?${searchParams.toString()}` : '';\n      const to = `${currentLocation.pathname}${search}${currentLocation.hash}`;\n      const firstParent = records.shift();\n      const actions = [() => routeNavigator.replace(firstParent), ...records.map(record => () => routeNavigator.push(record)), () => routeNavigator.push(to)];\n      const transaction = new NavigationTransaction(actions);\n      transactionExecutor.add(transaction);\n      transactionExecutor.doNext();\n    }\n  });\n}","map":{"version":3,"mappings":"AAIA,SAASA,qBAAT,QAAsC,mCAAtC;AACA,SAASC,kBAAT,QAAmC,SAAnC;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,oBAAT,QAAqC,UAArC;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA2CC,OAA3C,EAA0E;EACxE,OAAOD,KAAK,CAACE,GAAN,CAAWC,IAAD,IAAS;IACxB,MAAMC,eAAe,GAAG,EAAE,GAAGD,IAAL;MAAWF;IAAX,CAAxB;IACA,OAAOE,IAAI,CAACE,QAAL,GAAgBN,aAAa,CAACI,IAAI,CAACE,QAAN,EAAgB,CAAC,GAAGJ,OAAJ,EAAaG,eAAb,CAAhB,CAA7B,GAA8EA,eAArF;EACD,CAHM,EAGJE,IAHI,EAAP;AAID;;AAED,OAAM,SAAUC,WAAV,CAAsBC,MAAtB,EAA2CC,cAA3C,EAA2EC,OAA3E,EAAwGC,mBAAxG,EAAgJ;EACpJ,MAAMX,KAAK,GAAGD,aAAa,CAACS,MAAD,EAAS,EAAT,CAA3B;EACA,MAAMI,eAAe,GAAGF,OAAO,CAACG,KAAR,CAAcC,QAAtC;EACA,MAAMC,MAAM,GAAGL,OAAO,CAACM,KAAR,EAAeD,MAAf,IAAyB,EAAxC;EACA,MAAME,UAAU,GAAGP,OAAO,CAACM,KAAR,EAAeE,KAAf,CAAqBC,IAAxC;EACA,MAAMC,UAAU,GAAGpB,KAAK,CAACqB,IAAN,CAAYlB,IAAD,IAAUA,IAAI,CAACgB,IAAL,KAAcF,UAAnC,CAAnB;;EACA,IAAI,CAACG,UAAL,EAAiB;IACf;EACD;;EACD,MAAME,OAAO,GAAGF,UAAU,CAACnB,OAAX,CAAmBC,GAAnB,CAAuB;IAAA,IAAC;MAAEiB;IAAF,CAAD;IAAA,OAAcvB,kBAAkB,CAACuB,IAAD,EAAOJ,MAAP,CAAhC;EAAA,CAAvB,CAAhB;EACAQ,UAAU,CAAC,MAAK;IACd,IAAID,OAAO,CAACE,MAAZ,EAAoB;MAClB,MAAMC,YAAY,GAAG5B,kBAAkB,CAACe,eAAe,CAACc,MAAjB,CAAvC;MACAD,YAAY,CAACE,MAAb,CAAoB7B,oBAApB;MACA,MAAM4B,MAAM,GAAGD,YAAY,CAACG,QAAb,GAAwBJ,MAAxB,GAAiC,CAAjC,GAAqC,IAAIC,YAAY,CAACG,QAAb,EAAuB,EAAhE,GAAqE,EAApF;MACA,MAAMC,EAAE,GAAG,GAAGjB,eAAe,CAACkB,QAAQ,GAAGJ,MAAM,GAAGd,eAAe,CAACmB,IAAI,EAAtE;MACA,MAAMC,WAAW,GAAGV,OAAO,CAACW,KAAR,EAApB;MACA,MAAMC,OAAO,GAAG,CACd,MAAMzB,cAAc,CAAC0B,OAAf,CAAuBH,WAAvB,CADQ,EAEd,GAAGV,OAAO,CAACpB,GAAR,CAAakC,MAAD,IAAY,MAAM3B,cAAc,CAAC4B,IAAf,CAAoBD,MAApB,CAA9B,CAFW,EAGd,MAAM3B,cAAc,CAAC4B,IAAf,CAAoBR,EAApB,CAHQ,CAAhB;MAKA,MAAMS,WAAW,GAAG,IAAI3C,qBAAJ,CAA0BuC,OAA1B,CAApB;MACAvB,mBAAmB,CAAC4B,GAApB,CAAwBD,WAAxB;MACA3B,mBAAmB,CAAC6B,MAApB;IACD;EACF,CAhBS,CAAV;AAiBD","names":["NavigationTransaction","fillParamsIntoPath","createSearchParams","SEARCH_PARAM_INFLATE","flattenBranch","leafs","parents","map","leaf","leafWithParents","children","flat","fillHistory","config","routeNavigator","context","transactionExecutor","currentLocation","state","location","params","match","targetPath","route","path","targetLeaf","find","records","setTimeout","length","searchParams","search","delete","toString","to","pathname","hash","firstParent","shift","actions","replace","record","push","transaction","add","doNext"],"sources":["C:\\Users\\nasti\\Desktop\\VK\\ForestEm\\Forest\\node_modules\\@vkontakte\\vk-mini-apps-router\\src\\utils\\fillHistory.ts"],"sourcesContent":["import { RouteNavigator } from '../services/RouteNavigator.type';\nimport { RouteContextObject } from '../contexts';\nimport { RouteLeaf, RouteLeafWithParents } from '../type';\nimport { TransactionExecutor } from '../services/TransactionExecutor';\nimport { NavigationTransaction } from '../entities/NavigationTransaction';\nimport { fillParamsIntoPath } from './utils';\nimport { createSearchParams } from './createSearchParams';\nimport { SEARCH_PARAM_INFLATE } from '../const';\n\nfunction flattenBranch(leafs: RouteLeaf[], parents: RouteLeafWithParents[]): RouteLeafWithParents[] {\n  return leafs.map((leaf) => {\n    const leafWithParents = { ...leaf, parents };\n    return leaf.children ? flattenBranch(leaf.children, [...parents, leafWithParents]) : leafWithParents;\n  }).flat();\n}\n\nexport function fillHistory(config: RouteLeaf[], routeNavigator: RouteNavigator, context: RouteContextObject, transactionExecutor: TransactionExecutor) {\n  const leafs = flattenBranch(config, []);\n  const currentLocation = context.state.location;\n  const params = context.match?.params ?? {};\n  const targetPath = context.match?.route.path;\n  const targetLeaf = leafs.find((leaf) => leaf.path === targetPath);\n  if (!targetLeaf) {\n    return;\n  }\n  const records = targetLeaf.parents.map(({ path }) => fillParamsIntoPath(path, params));\n  setTimeout(() => {\n    if (records.length) {\n      const searchParams = createSearchParams(currentLocation.search);\n      searchParams.delete(SEARCH_PARAM_INFLATE);\n      const search = searchParams.toString().length > 0 ? `?${searchParams.toString()}` : '';\n      const to = `${currentLocation.pathname}${search}${currentLocation.hash}`;\n      const firstParent = records.shift() as string;\n      const actions = [\n        () => routeNavigator.replace(firstParent),\n        ...records.map((record) => () => routeNavigator.push(record)),\n        () => routeNavigator.push(to),\n      ];\n      const transaction = new NavigationTransaction(actions);\n      transactionExecutor.add(transaction);\n      transactionExecutor.doNext();\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}