{"ast":null,"code":"import { createKey, fillParamsIntoPath, isModalShown, isPopoutShown } from '../utils/utils';\nimport { NAVIGATION_BLOCKER_KEY, STATE_KEY_BLOCK_FORWARD_NAVIGATION, STATE_KEY_SHOW_MODAL, STATE_KEY_SHOW_POPOUT } from '../const';\nimport { hasNavigationOptionsKeys } from './RouteNavigator.type';\nimport { buildPanelPathFromModalMatch } from '../utils/buildPanelPathFromModalMatch';\nimport { NavigationTransaction } from '../entities/NavigationTransaction';\nexport class DefaultRouteNavigator {\n  constructor(router, viewHistory, transactionExecutor, setPopout) {\n    this.viewHistory = viewHistory;\n    this.transactionExecutor = transactionExecutor;\n    this.blockers = new Map();\n    this.blockerId = 0;\n    this.router = router;\n    this.setPopout = setPopout;\n  }\n\n  async push(to) {\n    let paramsOrOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const paramsAreOptions = hasNavigationOptionsKeys(paramsOrOptions);\n    const preparedOptions = paramsAreOptions ? paramsOrOptions : options;\n    const fullOptions = { ...preparedOptions,\n      replace: Boolean(this.router.state.location.state?.[STATE_KEY_BLOCK_FORWARD_NAVIGATION])\n    };\n    const preparedParams = paramsAreOptions ? {} : paramsOrOptions;\n    await this.navigate(to, fullOptions, preparedParams);\n  }\n\n  async replace(to) {\n    let paramsOrOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const paramsAreOptions = hasNavigationOptionsKeys(paramsOrOptions);\n    const preparedOptions = paramsAreOptions ? paramsOrOptions : options;\n    const preparedParams = paramsAreOptions ? {} : paramsOrOptions;\n    await this.navigate(to, { ...preparedOptions,\n      replace: true\n    }, preparedParams);\n  }\n\n  async back() {\n    let to = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n    if (to === 0) {\n      return;\n    }\n\n    await this.go(-Math.abs(to));\n  }\n\n  async backToFirst() {\n    if (this.viewHistory.position > 0) {\n      await this.go(-this.viewHistory.position);\n    } else {\n      await this.transactionExecutor.doNext();\n    }\n  }\n\n  async go(to) {\n    if (to === 0) {\n      await this.transactionExecutor.doNext();\n    } else {\n      await this.router.navigate(to);\n    }\n  }\n\n  runSync(actions) {\n    const transaction = new NavigationTransaction(actions);\n    this.transactionExecutor.add(transaction);\n    this.transactionExecutor.doNext();\n    return transaction.donePromise;\n  }\n\n  async showModal(id) {\n    await this.router.navigate(this.router.state.location, {\n      state: {\n        [STATE_KEY_SHOW_MODAL]: id,\n        [STATE_KEY_BLOCK_FORWARD_NAVIGATION]: true\n      },\n      replace: isModalShown(this.router.state.location)\n    });\n  }\n\n  async hideModal() {\n    let pushPanel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    if (!pushPanel && !this.viewHistory.isFirstPage || isModalShown(this.router.state.location)) {\n      await this.router.navigate(-1);\n    } else {\n      const modalMatch = this.router.state.matches.find(match => 'modal' in match.route);\n\n      if (modalMatch) {\n        const route = modalMatch.route;\n        const path = buildPanelPathFromModalMatch(modalMatch, this.router);\n\n        if (!path) {\n          const rootMessage = route.root ? `root: ${route.root} ` : '';\n          throw new Error(`There is no route registered for panel with ${rootMessage}, view: ${route.view}, panel: ${route.panel}.\nMake sure this route exists or use hideModal with pushPanel set to false.`);\n        }\n\n        await this.navigate(path, {\n          keepSearchParams: true\n        });\n      } else {\n        await this.transactionExecutor.doNext();\n      }\n    }\n  }\n\n  async showPopout(popout) {\n    this.setPopout(popout);\n    const state = {\n      [STATE_KEY_SHOW_POPOUT]: createKey(),\n      [STATE_KEY_BLOCK_FORWARD_NAVIGATION]: true\n    };\n\n    if (isModalShown(this.router.state.location)) {\n      state[STATE_KEY_SHOW_MODAL] = this.router.state.location.state[STATE_KEY_SHOW_MODAL];\n    }\n\n    const replace = isModalShown(this.router.state.location) || isPopoutShown(this.router.state.location);\n    await this.router.navigate(this.router.state.location, {\n      state,\n      replace\n    });\n  }\n\n  async hidePopout() {\n    if (isPopoutShown(this.router.state.location)) {\n      this.setPopout(null);\n\n      if (isModalShown(this.router.state.location)) {\n        await this.router.navigate(this.router.state.location, {\n          state: {\n            [STATE_KEY_BLOCK_FORWARD_NAVIGATION]: true,\n            [STATE_KEY_SHOW_MODAL]: this.router.state.location.state[STATE_KEY_SHOW_MODAL]\n          },\n          replace: true\n        });\n      } else {\n        await this.router.navigate(-1);\n      }\n    } else {\n      await this.transactionExecutor.doNext();\n    }\n  }\n\n  block(blocker) {\n    const key = (++this.blockerId).toString();\n    this.blockers.set(key, blocker);\n\n    const onLeave = data => {\n      return Array.from(this.blockers.values()).some(fn => fn(data));\n    };\n\n    this.router.getBlocker(NAVIGATION_BLOCKER_KEY, onLeave);\n    return () => {\n      this.blockers.delete(key);\n    };\n  }\n\n  async navigate(to, opts) {\n    let params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    // prettier-ignore\n    let path = typeof to === 'string' ? to : to.hasParams ? fillParamsIntoPath(to.path, params) : to.path;\n\n    if (opts?.keepSearchParams) {\n      path += this.router.state.location.search;\n    }\n\n    await this.router.navigate(path, opts);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["createKey","fillParamsIntoPath","isModalShown","isPopoutShown","NAVIGATION_BLOCKER_KEY","STATE_KEY_BLOCK_FORWARD_NAVIGATION","STATE_KEY_SHOW_MODAL","STATE_KEY_SHOW_POPOUT","hasNavigationOptionsKeys","buildPanelPathFromModalMatch","NavigationTransaction","DefaultRouteNavigator","constructor","router","viewHistory","transactionExecutor","setPopout","Map","push","to","paramsOrOptions","options","paramsAreOptions","preparedOptions","fullOptions","replace","Boolean","state","location","preparedParams","navigate","back","go","Math","abs","backToFirst","position","doNext","runSync","actions","transaction","add","donePromise","showModal","id","hideModal","pushPanel","isFirstPage","modalMatch","matches","find","match","route","path","rootMessage","root","Error","view","panel","keepSearchParams","showPopout","popout","hidePopout","block","blocker","key","blockerId","toString","blockers","set","onLeave","data","Array","from","values","some","fn","getBlocker","delete","opts","params","hasParams","search"],"sources":["C:\\Users\\nasti\\Desktop\\VK\\ForestEm\\Forest\\node_modules\\@vkontakte\\vk-mini-apps-router\\src\\services\\DefaultRouteNavigator.ts"],"sourcesContent":["import { BlockerFunction, Params, Router, RouterNavigateOptions } from '@remix-run/router';\nimport { createKey, fillParamsIntoPath, isModalShown, isPopoutShown } from '../utils/utils';\nimport {\n  NAVIGATION_BLOCKER_KEY,\n  STATE_KEY_BLOCK_FORWARD_NAVIGATION,\n  STATE_KEY_SHOW_MODAL,\n  STATE_KEY_SHOW_POPOUT,\n} from '../const';\nimport { hasNavigationOptionsKeys, NavigationOptions, RouteNavigator } from './RouteNavigator.type';\nimport { buildPanelPathFromModalMatch } from '../utils/buildPanelPathFromModalMatch';\nimport { InternalRouteConfig, ModalWithRoot } from '../type';\nimport { Page, PageWithParams } from '../page-types/common';\nimport { ViewHistory } from './ViewHistory';\nimport { TransactionExecutor } from './TransactionExecutor';\nimport { NavigationTransaction } from '../entities/NavigationTransaction';\n\nexport class DefaultRouteNavigator implements RouteNavigator {\n  private readonly router: Router;\n  private readonly setPopout: (popout: JSX.Element | null) => void;\n  private blockers: Map<string, BlockerFunction> = new Map();\n  private blockerId = 0;\n\n  constructor(\n    router: Router,\n    private viewHistory: ViewHistory,\n    private transactionExecutor: TransactionExecutor,\n    setPopout: (popout: JSX.Element | null) => void,\n  ) {\n    this.router = router;\n    this.setPopout = setPopout;\n  }\n\n  public async push(\n    to: string | Page | PageWithParams<string>,\n    paramsOrOptions: Params | NavigationOptions = {},\n    options: NavigationOptions = {},\n  ): Promise<void> {\n    const paramsAreOptions = hasNavigationOptionsKeys(paramsOrOptions);\n    const preparedOptions: NavigationOptions = paramsAreOptions ? paramsOrOptions : options;\n    const fullOptions = {\n      ...preparedOptions,\n      replace: Boolean(this.router.state.location.state?.[STATE_KEY_BLOCK_FORWARD_NAVIGATION]),\n    };\n    const preparedParams: Params = paramsAreOptions ? {} : (paramsOrOptions as Params);\n    await this.navigate(to, fullOptions, preparedParams);\n  }\n\n  public async replace(\n    to: string | Page | PageWithParams<string>,\n    paramsOrOptions: Params | NavigationOptions = {},\n    options: NavigationOptions = {},\n  ): Promise<void> {\n    const paramsAreOptions = hasNavigationOptionsKeys(paramsOrOptions);\n    const preparedOptions: NavigationOptions = paramsAreOptions ? paramsOrOptions : options;\n    const preparedParams: Params = paramsAreOptions ? {} : (paramsOrOptions as Params);\n    await this.navigate(to, { ...preparedOptions, replace: true }, preparedParams);\n  }\n\n  public async back(to = 1): Promise<void> {\n    if (to === 0) {\n      return;\n    }\n    await this.go(-Math.abs(to));\n  }\n\n  public async backToFirst(): Promise<void> {\n    if (this.viewHistory.position > 0) {\n      await this.go(-this.viewHistory.position);\n    } else {\n      await this.transactionExecutor.doNext();\n    }\n  }\n\n  public async go(to: number): Promise<void> {\n    if (to === 0) {\n      await this.transactionExecutor.doNext();\n    } else {\n      await this.router.navigate(to);\n    }\n  }\n\n  public runSync(actions: VoidFunction[]): Promise<void> {\n    const transaction = new NavigationTransaction(actions);\n    this.transactionExecutor.add(transaction);\n    this.transactionExecutor.doNext();\n    return transaction.donePromise;\n  }\n\n  public async showModal(id: string): Promise<void> {\n    await this.router.navigate(this.router.state.location, {\n      state: { [STATE_KEY_SHOW_MODAL]: id, [STATE_KEY_BLOCK_FORWARD_NAVIGATION]: true },\n      replace: isModalShown(this.router.state.location),\n    });\n  }\n\n  public async hideModal(pushPanel = false): Promise<void> {\n    if ((!pushPanel && !this.viewHistory.isFirstPage) || isModalShown(this.router.state.location)) {\n      await this.router.navigate(-1);\n    } else {\n      const modalMatch = this.router.state.matches.find((match) => 'modal' in match.route);\n      if (modalMatch) {\n        const route = modalMatch.route as ModalWithRoot & InternalRouteConfig;\n        const path = buildPanelPathFromModalMatch(modalMatch, this.router);\n        if (!path) {\n          const rootMessage = route.root ? `root: ${route.root} ` : '';\n          throw new Error(`There is no route registered for panel with ${rootMessage}, view: ${route.view}, panel: ${route.panel}.\nMake sure this route exists or use hideModal with pushPanel set to false.`);\n        }\n        await this.navigate(path, { keepSearchParams: true });\n      } else {\n        await this.transactionExecutor.doNext();\n      }\n    }\n  }\n\n  public async showPopout(popout: JSX.Element): Promise<void> {\n    this.setPopout(popout);\n    const state: any = {\n      [STATE_KEY_SHOW_POPOUT]: createKey(),\n      [STATE_KEY_BLOCK_FORWARD_NAVIGATION]: true,\n    };\n    if (isModalShown(this.router.state.location)) {\n      state[STATE_KEY_SHOW_MODAL] = this.router.state.location.state[STATE_KEY_SHOW_MODAL];\n    }\n    const replace =\n      isModalShown(this.router.state.location) || isPopoutShown(this.router.state.location);\n    await this.router.navigate(this.router.state.location, { state, replace });\n  }\n\n  public async hidePopout(): Promise<void> {\n    if (isPopoutShown(this.router.state.location)) {\n      this.setPopout(null);\n      if (isModalShown(this.router.state.location)) {\n        await this.router.navigate(this.router.state.location, {\n          state: {\n            [STATE_KEY_BLOCK_FORWARD_NAVIGATION]: true,\n            [STATE_KEY_SHOW_MODAL]: this.router.state.location.state[STATE_KEY_SHOW_MODAL],\n          },\n          replace: true,\n        });\n      } else {\n        await this.router.navigate(-1);\n      }\n    } else {\n      await this.transactionExecutor.doNext();\n    }\n  }\n\n  public block(blocker: BlockerFunction) {\n    const key = (++this.blockerId).toString();\n    this.blockers.set(key, blocker);\n    const onLeave: BlockerFunction = (data) => {\n      return Array.from(this.blockers.values()).some((fn) => fn(data));\n    };\n    this.router.getBlocker(NAVIGATION_BLOCKER_KEY, onLeave);\n\n    return () => {\n      this.blockers.delete(key);\n    };\n  }\n\n  private async navigate(\n    to: string | Page | PageWithParams<string>,\n    opts?: RouterNavigateOptions & NavigationOptions,\n    params: Params = {},\n  ): Promise<void> {\n    // prettier-ignore\n    let path = typeof to === 'string'\n      ? to\n      : to.hasParams\n        ? fillParamsIntoPath(to.path, params)\n        : to.path;\n\n    if (opts?.keepSearchParams) {\n      path += this.router.state.location.search;\n    }\n\n    await this.router.navigate(path, opts);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}