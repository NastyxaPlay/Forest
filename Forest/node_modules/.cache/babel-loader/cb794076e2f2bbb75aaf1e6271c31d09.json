{"ast":null,"code":"import { useLocation } from './hooks';\nimport { UNSAFE_warning as warning } from '@remix-run/router';\nimport { useCallback, useContext, useMemo, useRef } from 'react';\nimport { createSearchParams, getSearchParamsForLocation } from '../utils/createSearchParams';\nimport { RouterContext } from '../contexts';\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\n\nexport function useSearchParams(defaultInit) {\n  warning(typeof URLSearchParams !== 'undefined', 'You cannot use the `useSearchParams` hook in a browser that does not ' + 'support the URLSearchParams API. If you need to support Internet ' + 'Explorer 11, we recommend you load a polyfill such as ' + 'https://github.com/ungap/url-search-params\\n\\n' + 'If you\\'re unsure how to load polyfills, we recommend you check out ' + 'https://polyfill.io/v3/ which provides some recommendations about how ' + 'to load polyfills only for users that need them, instead of for every ' + 'user.');\n  let defaultSearchParamsRef = useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = useRef(false);\n  let location = useLocation();\n  let searchParams = useMemo(() => // Only merge in the defaults if we haven't yet called setSearchParams.\n  // Once we call that we want those to take precedence, otherwise you can't\n  // remove a param with setSearchParams({}) if it has an initial value\n  getSearchParamsForLocation(location.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current), [location.search]);\n  let router = useContext(RouterContext).router;\n  let setSearchParams = useCallback((nextInit, navigateOptions) => {\n    const newSearchParams = createSearchParams(typeof nextInit === 'function' ? nextInit(searchParams) : nextInit);\n    hasSetSearchParamsRef.current = true;\n    router.navigate(`${location.pathname}?${newSearchParams}`, navigateOptions);\n  }, [router, searchParams, location.pathname]);\n  return [searchParams, setSearchParams];\n}","map":{"version":3,"mappings":"AAAA,SAASA,WAAT,QAA4B,SAA5B;AACA,SAA8BC,cAAc,IAAIC,OAAhD,QAA+D,mBAA/D;AACA,SAASC,WAAT,EAAsBC,UAAtB,EAAkCC,OAAlC,EAA2CC,MAA3C,QAAyD,OAAzD;AACA,SAASC,kBAAT,EAA6BC,0BAA7B,QAAoF,6BAApF;AACA,SAASC,aAAT,QAA8B,aAA9B;AAgBA;;;;;AAIA,OAAM,SAAUC,eAAV,CACJC,WADI,EAC6B;EAEjCT,OAAO,CACL,OAAOU,eAAP,KAA2B,WADtB,EAEL,0EACA,mEADA,GAEA,wDAFA,GAGA,gDAHA,GAIA,sEAJA,GAKA,wEALA,GAMA,wEANA,GAOA,OATK,CAAP;EAYA,IAAIC,sBAAsB,GAAGP,MAAM,CAACC,kBAAkB,CAACI,WAAD,CAAnB,CAAnC;EACA,IAAIG,qBAAqB,GAAGR,MAAM,CAAC,KAAD,CAAlC;EAEA,IAAIS,QAAQ,GAAGf,WAAW,EAA1B;EACA,IAAIgB,YAAY,GAAGX,OAAO,CACxB,MACE;EACA;EACA;EACAG,0BAA0B,CACxBO,QAAQ,CAACE,MADe,EAExBH,qBAAqB,CAACI,OAAtB,GAAgC,IAAhC,GAAuCL,sBAAsB,CAACK,OAFtC,CALJ,EASxB,CAACH,QAAQ,CAACE,MAAV,CATwB,CAA1B;EAYA,IAAIE,MAAM,GAAGf,UAAU,CAACK,aAAD,CAAV,CAA0BU,MAAvC;EACA,IAAIC,eAAe,GAAGjB,WAAW,CAC/B,CAACkB,QAAD,EAAWC,eAAX,KAA8B;IAC5B,MAAMC,eAAe,GAAGhB,kBAAkB,CACxC,OAAOc,QAAP,KAAoB,UAApB,GAAiCA,QAAQ,CAACL,YAAD,CAAzC,GAA0DK,QADlB,CAA1C;IAGAP,qBAAqB,CAACI,OAAtB,GAAgC,IAAhC;IACAC,MAAM,CAACK,QAAP,CAAgB,GAAGT,QAAQ,CAACU,QAAQ,IAAIF,eAAe,EAAvD,EAA2DD,eAA3D;EACD,CAP8B,EAQ/B,CAACH,MAAD,EAASH,YAAT,EAAuBD,QAAQ,CAACU,QAAhC,CAR+B,CAAjC;EAWA,OAAO,CAACT,YAAD,EAAeI,eAAf,CAAP;AACD","names":["useLocation","UNSAFE_warning","warning","useCallback","useContext","useMemo","useRef","createSearchParams","getSearchParamsForLocation","RouterContext","useSearchParams","defaultInit","URLSearchParams","defaultSearchParamsRef","hasSetSearchParamsRef","location","searchParams","search","current","router","setSearchParams","nextInit","navigateOptions","newSearchParams","navigate","pathname"],"sources":["C:\\Users\\nasti\\Desktop\\VK\\ForestEm\\Forest\\node_modules\\@vkontakte\\vk-mini-apps-router\\src\\hooks\\useSearchParams.ts"],"sourcesContent":["import { useLocation } from './hooks';\nimport { RelativeRoutingType, UNSAFE_warning as warning } from '@remix-run/router';\nimport { useCallback, useContext, useMemo, useRef } from 'react';\nimport { createSearchParams, getSearchParamsForLocation, URLSearchParamsInit } from '../utils/createSearchParams';\nimport { RouterContext } from '../contexts';\n\nexport interface NavigateOptions {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n}\n\nexport type SetURLSearchParams = (\n  nextInit?:\n  | URLSearchParamsInit\n  | ((prev: URLSearchParams) => URLSearchParamsInit),\n  navigateOpts?: NavigateOptions\n) => void;\n\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nexport function useSearchParams(\n  defaultInit?: URLSearchParamsInit\n): [URLSearchParams, SetURLSearchParams] {\n  warning(\n    typeof URLSearchParams !== 'undefined',\n    'You cannot use the `useSearchParams` hook in a browser that does not ' +\n    'support the URLSearchParams API. If you need to support Internet ' +\n    'Explorer 11, we recommend you load a polyfill such as ' +\n    'https://github.com/ungap/url-search-params\\n\\n' +\n    'If you\\'re unsure how to load polyfills, we recommend you check out ' +\n    'https://polyfill.io/v3/ which provides some recommendations about how ' +\n    'to load polyfills only for users that need them, instead of for every ' +\n    'user.'\n  );\n\n  let defaultSearchParamsRef = useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = useRef(false);\n\n  let location = useLocation();\n  let searchParams = useMemo(\n    () =>\n      // Only merge in the defaults if we haven't yet called setSearchParams.\n      // Once we call that we want those to take precedence, otherwise you can't\n      // remove a param with setSearchParams({}) if it has an initial value\n      getSearchParamsForLocation(\n        location.search,\n        hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current\n      ),\n    [location.search]\n  );\n\n  let router = useContext(RouterContext).router;\n  let setSearchParams = useCallback<SetURLSearchParams>(\n    (nextInit, navigateOptions) => {\n      const newSearchParams = createSearchParams(\n        typeof nextInit === 'function' ? nextInit(searchParams) : nextInit\n      );\n      hasSetSearchParamsRef.current = true;\n      router.navigate(`${location.pathname}?${newSearchParams}`, navigateOptions);\n    },\n    [router, searchParams, location.pathname]\n  );\n\n  return [searchParams, setSearchParams];\n}\n"]},"metadata":{},"sourceType":"module"}