{"ast":null,"code":"export class TransactionExecutor {\n  constructor(forceUpdate) {\n    this.forceUpdate = forceUpdate;\n    this.transactions = [];\n  }\n\n  get initialDelay() {\n    return this.transactions.length > 1 || this.transactions.length > 0 && this.transactions[0].isMultiAction ? 100 : 0;\n  }\n\n  add(transaction) {\n    this.transactions.push(transaction);\n    this.forceUpdate();\n  }\n\n  async doNext() {\n    // Нужно делать асинхронно, иначе будет бесконечный цикл навигация-изменение стейта-навигация...\n    setTimeout(() => {\n      if (this.transactions.length) {\n        this.transactions[0].doNext();\n\n        if (this.transactions[0].finished) {\n          this.transactions.shift();\n        }\n      }\n    });\n  }\n\n}","map":{"version":3,"mappings":"AAEA,OAAM,MAAOA,mBAAP,CAA0B;EAG9BC,YAAoBC,WAApB,EAA2C;IAAvB;IAFZ,oBAAwC,EAAxC;EAEuC;;EAE/B,IAAZC,YAAY;IACd,OAAO,KAAKC,YAAL,CAAkBC,MAAlB,GAA2B,CAA3B,IAAgC,KAAKD,YAAL,CAAkBC,MAAlB,GAA2B,CAA3B,IAAgC,KAAKD,YAAL,CAAkB,CAAlB,EAAqBE,aAArF,GAAqG,GAArG,GAA2G,CAAlH;EACD;;EAEDC,GAAG,CAACC,WAAD,EAAmC;IACpC,KAAKJ,YAAL,CAAkBK,IAAlB,CAAuBD,WAAvB;IACA,KAAKN,WAAL;EACD;;EAEW,MAANQ,MAAM;IACV;IACAC,UAAU,CAAC,MAAK;MACd,IAAI,KAAKP,YAAL,CAAkBC,MAAtB,EAA8B;QAC5B,KAAKD,YAAL,CAAkB,CAAlB,EAAqBM,MAArB;;QACA,IAAI,KAAKN,YAAL,CAAkB,CAAlB,EAAqBQ,QAAzB,EAAmC;UACjC,KAAKR,YAAL,CAAkBS,KAAlB;QACD;MACF;IACF,CAPS,CAAV;EAQD;;AAxB6B","names":["TransactionExecutor","constructor","forceUpdate","initialDelay","transactions","length","isMultiAction","add","transaction","push","doNext","setTimeout","finished","shift"],"sources":["C:\\Users\\nasti\\Desktop\\VK\\ForestEm\\Forest\\node_modules\\@vkontakte\\vk-mini-apps-router\\src\\services\\TransactionExecutor.ts"],"sourcesContent":["import { NavigationTransaction } from '../entities/NavigationTransaction';\n\nexport class TransactionExecutor {\n  private transactions: NavigationTransaction[] = [];\n\n  constructor(private forceUpdate: () => void) {}\n\n  get initialDelay(): number {\n    return this.transactions.length > 1 || this.transactions.length > 0 && this.transactions[0].isMultiAction ? 100 : 0;\n  }\n\n  add(transaction: NavigationTransaction): void {\n    this.transactions.push(transaction);\n    this.forceUpdate();\n  }\n\n  async doNext(): Promise<void> {\n    // Нужно делать асинхронно, иначе будет бесконечный цикл навигация-изменение стейта-навигация...\n    setTimeout(() => {\n      if (this.transactions.length) {\n        this.transactions[0].doNext();\n        if (this.transactions[0].finished) {\n          this.transactions.shift();\n        }\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}