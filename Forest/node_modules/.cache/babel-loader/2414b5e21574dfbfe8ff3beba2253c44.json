{"ast":null,"code":"import { uniqueKey } from './common';\n\nclass BasePanelPage {\n  constructor(id, path, modals) {\n    this.id = id;\n    this.path = path;\n    this.modals = modals;\n    modals.forEach(modal => {\n      // @ts-expect-error\n      this[uniqueKey(this, modal.id)] = modal;\n    });\n  }\n\n  getRoutes() {\n    return this.modals.map(modalOrTab => modalOrTab.getRoutes()).flat().map(route => ({ ...route,\n      panel: this.id\n    })).concat({\n      path: this.path,\n      panel: this.id\n    });\n  }\n\n}\n\nexport class PanelPage extends BasePanelPage {\n  constructor(id, path) {\n    let modals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    super(id, path, modals);\n    this.path = path;\n    this.hasParams = false;\n  }\n\n}\nexport class PanelPageWithParams extends BasePanelPage {\n  constructor(id, path, paramKeys) {\n    let modals = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    super(id, path, modals);\n    this.id = id;\n    this.path = path;\n    this.paramKeys = paramKeys;\n    this.hasParams = true;\n  }\n\n}\nexport function createPanel(id, path, modals, paramKeys) {\n  if (paramKeys) {\n    return new PanelPageWithParams(id, path, paramKeys, modals ?? []);\n  }\n\n  return new PanelPage(id, path, modals ?? []);\n}","map":{"version":3,"mappings":"AAAA,SAAkEA,SAAlE,QAAmF,UAAnF;;AAaA,MAAeC,aAAf,CAA4B;EAC1BC,YAA6BC,EAA7B,EAA2CC,IAA3C,EAAmEC,MAAnE,EAAuF;IAA1D;IAAc;IAAwB;IACjEA,MAAM,CAACC,OAAP,CAAgBC,KAAD,IAAU;MACvB;MACA,KAAKP,SAAS,CAAC,IAAD,EAAOO,KAAK,CAACJ,EAAb,CAAd,IAAkCI,KAAlC;IACD,CAHD;EAID;;EAEDC,SAAS;IACP,OAAO,KAAKH,MAAL,CACJI,GADI,CACCC,UAAD,IAAgBA,UAAU,CAACF,SAAX,EADhB,EAEJG,IAFI,GAGJF,GAHI,CAGCG,KAAD,KAA+B,EAAE,GAAGA,KAAL;MAAYC,KAAK,EAAE,KAAKV;IAAxB,CAA/B,CAHA,EAIJW,MAJI,CAIG;MACNV,IAAI,EAAE,KAAKA,IADL;MAENS,KAAK,EAAE,KAAKV;IAFN,CAJH,CAAP;EAQD;;AAjByB;;AAoB5B,OAAM,MAAOY,SAAP,SAA2Cd,aAA3C,CAA2D;EAE/DC,YAAYC,EAAZ,EAA0BC,IAA1B,EAAiE;IAAA,IAAzBC,MAAyB,uEAAF,EAAE;IAC/D,MAAMF,EAAN,EAAUC,IAAV,EAAgBC,MAAhB;IADwB;IAD1B,iBAAmB,KAAnB;EAGC;;AAJ8D;AAOjE,OAAM,MAAOW,mBAAP,SAAuEf,aAAvE,CAAuF;EAE3FC,YAAmBC,EAAnB,EAAiCC,IAAjC,EAAsDa,SAAtD,EAAwG;IAAA,IAAzBZ,MAAyB,uEAAF,EAAE;IACtG,MAAMF,EAAN,EAAUC,IAAV,EAAgBC,MAAhB;IADiB;IAAc;IAAqB;IADtD,iBAAkB,IAAlB;EAGC;;AAJ0F;AAuH7F,OAAM,SAAUa,WAAV,CAA0Df,EAA1D,EAAiEC,IAAjE,EAA+EC,MAA/E,EAAsGY,SAAtG,EAA8H;EAElI,IAAIA,SAAJ,EAAe;IACb,OAAO,IAAID,mBAAJ,CAAwBb,EAAxB,EAA4BC,IAA5B,EAAkCa,SAAlC,EAA6CZ,MAAM,IAAI,EAAvD,CAAP;EACD;;EACD,OAAO,IAAIU,SAAJ,CAAcZ,EAAd,EAAkBC,IAAlB,EAAwBC,MAAM,IAAI,EAAlC,CAAP;AACD","names":["uniqueKey","BasePanelPage","constructor","id","path","modals","forEach","modal","getRoutes","map","modalOrTab","flat","route","panel","concat","PanelPage","PanelPageWithParams","paramKeys","createPanel"],"sources":["C:\\Users\\nasti\\Desktop\\VK\\ForestEm\\Forest\\node_modules\\@vkontakte\\vk-mini-apps-router\\src\\page-types\\PanelPage.ts"],"sourcesContent":["import { AddChild, HasId, Page, PageWithParams, RepresentsRoutes, uniqueKey } from './common';\nimport { AnyModalPage } from './ModalPage';\nimport { CommonRouteObject } from '../type';\nimport { AnyTabPage } from './TabPage';\n\ninterface PanelRoutePartial extends CommonRouteObject {\n  panel: string;\n  tab?: string;\n  modal?: string;\n}\n\ntype AnySubPage = AnyModalPage | AnyTabPage;\n\nabstract class BasePanelPage<I extends string> implements RepresentsRoutes<PanelRoutePartial>, HasId<I> {\n  protected constructor(public id: I, public path: string, protected modals: AnySubPage[]) {\n    modals.forEach((modal) => {\n      // @ts-expect-error\n      this[uniqueKey(this, modal.id)] = modal;\n    });\n  }\n\n  getRoutes(): PanelRoutePartial[] {\n    return this.modals\n      .map((modalOrTab) => modalOrTab.getRoutes())\n      .flat()\n      .map((route): PanelRoutePartial => ({ ...route, panel: this.id }))\n      .concat({\n        path: this.path,\n        panel: this.id,\n      });\n  }\n}\n\nexport class PanelPage<I extends string> extends BasePanelPage<I> implements Page, HasId<I> {\n  hasParams: false = false;\n  constructor(id: I, public path: string, modals: AnySubPage[] = []) {\n    super(id, path, modals);\n  }\n}\n\nexport class PanelPageWithParams<I extends string, T extends string> extends BasePanelPage<I> implements PageWithParams<T>, HasId<I> {\n  hasParams: true = true;\n  constructor(public id: I, public path: string, public paramKeys: readonly T[], modals: AnySubPage[] = []) {\n    super(id, path, modals);\n  }\n}\n\nexport type AnyPanel = PanelPage<any> | PanelPageWithParams<any, any>;\n\nexport function createPanel<\n  T extends string,\n  A extends AnySubPage, B extends AnySubPage, C extends AnySubPage, D extends AnySubPage,\n  E extends AnySubPage, F extends AnySubPage, G extends AnySubPage, H extends AnySubPage,\n  I extends AnySubPage, J extends AnySubPage,\n>(id: T, path: string, modals: [A, B, C, D, E, F, G, H, I, J]):\nAddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<\nAddChild<PanelPage<T>, A>, B>, C>, D>, E>, F>, G>, H>, I>, J>;\nexport function createPanel<\n  T extends string,\n  A extends AnySubPage, B extends AnySubPage, C extends AnySubPage, D extends AnySubPage,\n  E extends AnySubPage, F extends AnySubPage, G extends AnySubPage, H extends AnySubPage,\n  I extends AnySubPage,\n>(id: T, path: string, modals: [A, B, C, D, E, F, G, H, I]):\nAddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<\nAddChild<PanelPage<T>, A>, B>, C>, D>, E>, F>, G>, H>, I>;\nexport function createPanel<\n  T extends string,\n  A extends AnySubPage, B extends AnySubPage, C extends AnySubPage, D extends AnySubPage,\n  E extends AnySubPage, F extends AnySubPage, G extends AnySubPage, H extends AnySubPage,\n>(id: T, path: string, modals: [A, B, C, D, E, F, G, H]):\nAddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<PanelPage<T>, A>, B>, C>, D>, E>, F>, G>, H>;\nexport function createPanel<\n  T extends string,\n  A extends AnySubPage, B extends AnySubPage, C extends AnySubPage, D extends AnySubPage,\n  E extends AnySubPage, F extends AnySubPage, G extends AnySubPage,\n>(id: T, path: string, modals: [A, B, C, D, E, F, G]):\nAddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<PanelPage<T>, A>, B>, C>, D>, E>, F>, G>;\nexport function createPanel<\n  T extends string,\n  A extends AnySubPage, B extends AnySubPage, C extends AnySubPage, D extends AnySubPage,\n  E extends AnySubPage, F extends AnySubPage,\n>(id: T, path: string, modals: [A, B, C, D, E, F]):\nAddChild<AddChild<AddChild<AddChild<AddChild<AddChild<PanelPage<T>, A>, B>, C>, D>, E>, F>;\nexport function createPanel<\n  T extends string,\n  A extends AnySubPage, B extends AnySubPage, C extends AnySubPage, D extends AnySubPage,\n  E extends AnySubPage,\n>(id: T, path: string, modals: [A, B, C, D, E]):\nAddChild<AddChild<AddChild<AddChild<AddChild<PanelPage<T>, A>, B>, C>, D>, E>;\nexport function createPanel<\n  T extends string,\n  A extends AnySubPage, B extends AnySubPage, C extends AnySubPage, D extends AnySubPage,\n>(id: T, path: string, modals: [A, B, C, D]):\nAddChild<AddChild<AddChild<AddChild<PanelPage<T>, A>, B>, C>, D>;\nexport function createPanel<\n  T extends string, A extends AnySubPage, B extends AnySubPage, C extends AnySubPage,\n>(id: T, path: string, modals: [A, B, C]): AddChild<AddChild<AddChild<PanelPage<T>, A>, B>, C>;\nexport function createPanel<\n  T extends string, A extends AnySubPage, B extends AnySubPage,\n>(id: T, path: string, modals: [A, B]): AddChild<AddChild<PanelPage<T>, A>, B>;\nexport function createPanel<T extends string, A extends AnySubPage>(id: T, path: string, modals: [A]): AddChild<PanelPage<T>, A>;\nexport function createPanel<T extends string>(id: T, path: string, modals?: AnySubPage[]): PanelPage<T>;\n\nexport function createPanel<\n  T extends string, P extends string,\n  A extends AnySubPage, B extends AnySubPage, C extends AnySubPage, D extends AnySubPage,\n  E extends AnySubPage, F extends AnySubPage, G extends AnySubPage, H extends AnySubPage,\n  I extends AnySubPage, J extends AnySubPage,\n>(id: T, path: string, modals: [A, B, C, D, E, F, G, H, I, J], paramKeys: readonly P[]):\nAddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<\nAddChild<PanelPageWithParams<T, P>, A>, B>, C>, D>, E>, F>, G>, H>, I>, J>;\nexport function createPanel<\n  T extends string, P extends string,\n  A extends AnySubPage, B extends AnySubPage, C extends AnySubPage, D extends AnySubPage,\n  E extends AnySubPage, F extends AnySubPage, G extends AnySubPage, H extends AnySubPage,\n  I extends AnySubPage,\n>(id: T, path: string, modals: [A, B, C, D, E, F, G, H, I], paramKeys: readonly P[]):\nAddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<\nAddChild<PanelPageWithParams<T, P>, A>, B>, C>, D>, E>, F>, G>, H>, I>;\nexport function createPanel<\n  T extends string, P extends string,\n  A extends AnySubPage, B extends AnySubPage, C extends AnySubPage, D extends AnySubPage,\n  E extends AnySubPage, F extends AnySubPage, G extends AnySubPage, H extends AnySubPage,\n>(id: T, path: string, modals: [A, B, C, D, E, F, G, H], paramKeys: readonly P[]):\nAddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<PanelPageWithParams<T, P>, A>, B>, C>, D>, E>, F>, G>, H>;\nexport function createPanel<\n  T extends string, P extends string,\n  A extends AnySubPage, B extends AnySubPage, C extends AnySubPage, D extends AnySubPage,\n  E extends AnySubPage, F extends AnySubPage, G extends AnySubPage,\n>(id: T, path: string, modals: [A, B, C, D, E, F, G], paramKeys: readonly P[]):\nAddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<PanelPageWithParams<T, P>, A>, B>, C>, D>, E>, F>, G>;\nexport function createPanel<\n  T extends string, P extends string,\n  A extends AnySubPage, B extends AnySubPage, C extends AnySubPage, D extends AnySubPage,\n  E extends AnySubPage, F extends AnySubPage,\n>(id: T, path: string, modals: [A, B, C, D, E, F], paramKeys: readonly P[]):\nAddChild<AddChild<AddChild<AddChild<AddChild<AddChild<PanelPageWithParams<T, P>, A>, B>, C>, D>, E>, F>;\nexport function createPanel<\n  T extends string, P extends string,\n  A extends AnySubPage, B extends AnySubPage, C extends AnySubPage, D extends AnySubPage,\n  E extends AnySubPage,\n>(id: T, path: string, modals: [A, B, C, D, E], paramKeys: readonly P[]):\nAddChild<AddChild<AddChild<AddChild<AddChild<PanelPageWithParams<T, P>, A>, B>, C>, D>, E>;\nexport function createPanel<\n  T extends string, P extends string,\n  A extends AnySubPage, B extends AnySubPage, C extends AnySubPage, D extends AnySubPage,\n>(id: T, path: string, modals: [A, B, C, D], paramKeys: readonly P[]):\nAddChild<AddChild<AddChild<AddChild<PanelPageWithParams<T, P>, A>, B>, C>, D>;\nexport function createPanel<\n  T extends string, P extends string,\n  A extends AnySubPage, B extends AnySubPage, C extends AnySubPage,\n>(id: T, path: string, modals: [A, B, C], paramKeys: readonly P[]): AddChild<AddChild<AddChild<PanelPageWithParams<T, P>, A>, B>, C>;\nexport function createPanel<\n  T extends string, P extends string, A extends AnySubPage, B extends AnySubPage,\n>(id: T, path: string, modals: [A, B], paramKeys: readonly P[]): AddChild<AddChild<PanelPageWithParams<T, P>, A>, B>;\nexport function createPanel<\n  T extends string, P extends string, A extends AnySubPage,\n>(id: T, path: string, modals: [A], paramKeys: readonly P[]): AddChild<PanelPageWithParams<T, P>, A>;\nexport function createPanel<T extends string, P extends string>(id: T, path: string, modals: AnySubPage[], paramKeys: readonly P[]): PanelPageWithParams<T, P>;\nexport function createPanel<T extends string, P extends string>(id: T, path: string, modals?: AnySubPage[], paramKeys?: readonly P[]):\nPanelPage<T> | PanelPageWithParams<T, P> {\n  if (paramKeys) {\n    return new PanelPageWithParams(id, path, paramKeys, modals ?? []);\n  }\n  return new PanelPage(id, path, modals ?? []);\n}\n"]},"metadata":{},"sourceType":"module"}